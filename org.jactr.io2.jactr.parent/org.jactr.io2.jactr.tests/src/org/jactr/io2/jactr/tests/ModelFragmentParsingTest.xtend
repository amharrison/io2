/*
 * generated by Xtext 2.16.0
 */
package org.jactr.io2.jactr.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.jactr.io2.jactr.modelFragment.ModelFragment
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(ModelFragmentInjectorProvider)
class ModelFragmentParsingTest {
	@Inject
	ParseHelper<ModelFragment> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
namespace syntax{

module "org.jactr.core.module.declarative.six.DefaultDeclarativeModule6"[] 
module "org.jactr.core.module.procedural.six.DefaultProceduralModule6"[]
module "org.jactr.core.module.goal.six.DefaultGoalModule6" [ ]
module "org.jactr.core.module.imaginal.six.DefaultImaginalModule6" []

buffers{
  goal {}[]
  imaginal {}
} 

chunktype firstType {slot1 = true} 

chunktype secondType extends firstType {slot2 = false}

@Override
chunktype thirdType extends secondType {slot3 = null}

firstType firstInstance(slot1='string')[], secondInstance(slot1=1.2)

secondType thirdInstance(slot2=firstInstance), fourthInstance(slot2=secondType)

production firstProduction{
  goal{
    isa firstType
    slot1 = firstInstance
  }
  ?imaginal{
    state = false
  }
  imaginal{
    secondInstance
    slot1 = 1.2
  }
  proxy("org.jactr.core.production.condition.SystemPropertyCondition"){
    slot = true
    slot2 = 'string'
  }
  script("javascript")<[[
    var test=1;
    function test(){
      
    }
  ]]>
  }{
  +goal{
    isa thirdType
    slot3 = false
  }
  goal{
    slot1 = true
  }
  - goal{
    slot1 = false
  }
  output("this is output")
  proxy("org.jactr.core.production.action.StopAction"){
    slot = true
    slot2 = 'string'
  }
  script("javascript")<[[
    var test=1;
    function test(){
      
    }
  ]]>
  }
}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
