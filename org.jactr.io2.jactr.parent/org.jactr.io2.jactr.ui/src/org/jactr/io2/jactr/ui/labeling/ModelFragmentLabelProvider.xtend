/*
 * generated by Xtext 2.16.0
 */
package org.jactr.io2.jactr.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.jactr.io2.jactr.modelFragment.Add
import org.jactr.io2.jactr.modelFragment.AndSlot
import org.jactr.io2.jactr.modelFragment.Buffer
import org.jactr.io2.jactr.modelFragment.ChunkDef
import org.jactr.io2.jactr.modelFragment.ChunkType
import org.jactr.io2.jactr.modelFragment.Chunks
import org.jactr.io2.jactr.modelFragment.ConditionalSlot
import org.jactr.io2.jactr.modelFragment.Match
import org.jactr.io2.jactr.modelFragment.ModelExtension
import org.jactr.io2.jactr.modelFragment.ModelFragment
import org.jactr.io2.jactr.modelFragment.ModelModule
import org.jactr.io2.jactr.modelFragment.Modify
import org.jactr.io2.jactr.modelFragment.NotSlot
import org.jactr.io2.jactr.modelFragment.OrSlot
import org.jactr.io2.jactr.modelFragment.PackageDeclaration
import org.jactr.io2.jactr.modelFragment.ParametersBlock
import org.jactr.io2.jactr.modelFragment.Production
import org.jactr.io2.jactr.modelFragment.Query
import org.jactr.io2.jactr.modelFragment.Remove
import org.jactr.io2.jactr.modelFragment.Script
import org.jactr.io2.jactr.modelFragment.SimpleSlot
import org.jactr.io2.jactr.modelFragment.Value

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class ModelFragmentLabelProvider extends DefaultEObjectLabelProvider {

  val IMAGE_HOME = "basic/"

  @Inject
  new(AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  def image(ModelFragment frag){
    IMAGE_HOME+"jactr.gif"
  }
  
  def image(PackageDeclaration dec){
    IMAGE_HOME+"library.gif"
  }
  
  def image(ModelExtension ext)
  {
    IMAGE_HOME+"extension.gif"
  }
  
  def image(ModelModule module)
  {
    IMAGE_HOME+"extension.gif"
  }

  def text(ParametersBlock parameters) {
    'parameters'
  }

  def text(Chunks ele) {
    ele.type.name
  }

  def image(Chunks ele) {
    IMAGE_HOME + "chunktype.gif"
  }

  def image(ChunkType ele) {
    IMAGE_HOME + "chunktype.gif"
  }

  def image(ChunkDef ele) {
    IMAGE_HOME + "chunk.gif"
  }

  def image(Buffer b) {
    IMAGE_HOME + "buffer.gif"
  }
  
  def image(Production p){
    IMAGE_HOME+"production.gif"
  }
  
  def image(Match m){
    IMAGE_HOME+"pattern.gif"
  }
  
  def text(Match m){
    m.name.name
  }
  
  def image(Query q){
    IMAGE_HOME+"query.gif"
  }
  
  def text(Query q){
    q.name.name
  }
  
  def image(Script s){
    IMAGE_HOME+"script.gif"
  }
  
  def image(Add a){
    IMAGE_HOME+"add.gif"
  }
  
  def text(Add a){
    a.name.name
  }
  
  def image(Modify a){
    IMAGE_HOME+"modify.gif"
  }
  
  def text(Modify a){
    a.name.name
  }
  
  def image(Remove a){
    IMAGE_HOME+"remove.gif"
  }
  
  def text(Remove a){
    a.name.name
  }
  

  def toString(Value value) {
    if (value.name !== null)
      return value.name
    if (value.string !== null)
      return value.string
    if (value.boolean !== null)
      return value.boolean.toString
    if (value.number != null)
      return value.number.toString
    return null
  }

  def text(ConditionalSlot slot) {
    slot.name + ' '+slot.condition + ' '+toString(slot.value)
  }

  def text(SimpleSlot slot) {
    slot.name + ' = ' + toString(slot.value)
  }

  def image(SimpleSlot slot) {
    IMAGE_HOME + "slot.gif"
  }

  def image(ConditionalSlot slot) {
    IMAGE_HOME + "slot.gif"
  }
  
  def image(OrSlot slot) {
    IMAGE_HOME + "slot.gif"
  }
  
  def image(AndSlot slot) {
    IMAGE_HOME + "slot.gif"
  }
  
  def image(NotSlot slot) {
    IMAGE_HOME + "slot.gif"
  }
  
  def text(OrSlot slot) {
    "or"
  }
  
  def text(AndSlot slot) {
    "and"
  }
  
  def text(NotSlot slot) {
    "not"
  }

// Labels and icons can be computed like this:
//	def text(Greeting ele) {
//		'A greeting to ' + ele.name
//	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}
