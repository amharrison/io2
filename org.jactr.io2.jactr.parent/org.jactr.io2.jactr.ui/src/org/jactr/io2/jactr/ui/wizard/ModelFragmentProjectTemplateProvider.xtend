/*
 * generated by Xtext 2.16.0
 */
package org.jactr.io2.jactr.ui.wizard

import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class ModelFragmentProjectTemplateProvider implements IProjectTemplateProvider {
  override getProjectTemplates() {
    #[new HelloWorldProject]
  }
}

@ProjectTemplate(label="Empty Project", icon="basic/jactr-project.gif", description="<p><b>Empty Project</b></p>
<p>Choose either basic or embodied project to start with</p>")
final class HelloWorldProject {

  val namespace = text("Package:", "edu.institution.lab.project",
    "The dotted package path to place for the model. Often reverse domain name.")
  val modelType = combo("Model Type:", #["Basic", "Embodied"], "Type of model to generate")

  override protected validate() {
    if (namespace.value.matches('[a-z][a-z0-9_]*([\\.][a-z][a-z0-9_]*)*'))
      null
    else
      new Status(ERROR, "Wizard", "'" + namespace + "' is not a valid package name")
  }

  override generateProjects(IProjectGenerator generator) {
    val isEmbodied = modelType.value.equals("Embodied")
    generator.generate(new ManifestContributingPluginProjectFactory => [
      val path = namespace.value.replace(".", "/")

      projectName = projectInfo.projectName
      location = projectInfo.locationPath
      if (isEmbodied)
        requiredBundles.addAll(ModelStubs.embodiedModelDependencies)
      else
        requiredBundles.addAll(ModelStubs.basicModelDependencies)

      projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID,"org.jactr.eclipse.core.project.actrNature"]
      builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID, "org.eclipse.pde.ManifestBuilder"]
      folders += #["src", "models"]
      if (isEmbodied)
        addFile('''models/«path»/Model.jactr''', ModelStubs.embodiedModel(namespace + ".Model"))
      else
        addFile('''models/«path»/Model.jactr''', ModelStubs.basicModel(namespace + ".Model"))
        
    ])
  }
}
