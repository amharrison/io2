/*
 * generated by Xtext 2.16.0
 */
package org.jactr.io2.jactr.ui

import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor
import org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator
import org.eclipse.xtext.ide.refactoring.IRenameStrategy2
import org.eclipse.xtext.ui.editor.findrefs.IReferenceFinder
import org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkHelper
import org.eclipse.xtext.ui.editor.occurrences.IOccurrenceComputer
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration
import org.jactr.io2.jactr.ui.contentassist.ContentAssistUtils
import org.jactr.io2.jactr.ui.findRefs.ModelFragmentUIReferenceFinder
import org.jactr.io2.jactr.ui.highlighting.HighlightingConfiguration
import org.jactr.io2.jactr.ui.highlighting.SemanticHighlightingCalculator
import org.jactr.io2.jactr.ui.hyperlink.JACTRHyperlinkHelper
import org.jactr.io2.jactr.ui.occurrence.ModelFragmentOccurrenceComputer
import org.jactr.io2.jactr.ui.rename.RenameStrategy
import org.jactr.io2.jactr.ui.validation.EclipseProjectAwareClassNameValidator
import org.jactr.io2.jactr.validation.IClassNameValidator

/**
 * Use this class to register components to be used within the Eclipse IDE.
 */
@FinalFieldsConstructor
class ModelFragmentUiModule extends AbstractModelFragmentUiModule {
	def Class<? extends IHighlightingConfiguration> bindIHighlightingConfiguration() {
		return HighlightingConfiguration;
	}

	def Class<? extends ISemanticHighlightingCalculator> bindIdeSemanticHighlightingCalculator() {
		return SemanticHighlightingCalculator
	}

	def Class<? extends IHyperlinkHelper> bindIHyperlinkHelper() {
		JACTRHyperlinkHelper
	}
	
//	override Provider<? extends IAllContainersState> provideIAllContainersState() {
//    return Access.getWorkspaceProjectsState();
//  }

  def Class<? extends IClassNameValidator> bindIClassNameValidator() {
    return EclipseProjectAwareClassNameValidator
  }
  
  def Class<? extends ContentAssistUtils> bindContentAssistUtils(){
    return ContentAssistUtils
  }
  
  override Class<? extends IRenameStrategy2> bindIRenameStrategy2() {
    return RenameStrategy;
  }
  
  def Class<? extends IOccurrenceComputer> bindIOccurrenceComputer(){
    return ModelFragmentOccurrenceComputer
  }
  
  def Class<? extends IReferenceFinder> bindReferenceFinder(){
    ModelFragmentUIReferenceFinder
  }
}
