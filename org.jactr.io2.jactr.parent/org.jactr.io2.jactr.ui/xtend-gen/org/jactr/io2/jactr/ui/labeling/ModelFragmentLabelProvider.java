/**
 * generated by Xtext 2.16.0
 */
package org.jactr.io2.jactr.ui.labeling;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.jactr.io2.jactr.modelFragment.Add;
import org.jactr.io2.jactr.modelFragment.AndSlot;
import org.jactr.io2.jactr.modelFragment.Buffer;
import org.jactr.io2.jactr.modelFragment.ChunkDef;
import org.jactr.io2.jactr.modelFragment.ChunkType;
import org.jactr.io2.jactr.modelFragment.Chunks;
import org.jactr.io2.jactr.modelFragment.Condition;
import org.jactr.io2.jactr.modelFragment.ConditionalSlot;
import org.jactr.io2.jactr.modelFragment.Match;
import org.jactr.io2.jactr.modelFragment.ModelExtension;
import org.jactr.io2.jactr.modelFragment.ModelFragment;
import org.jactr.io2.jactr.modelFragment.ModelModule;
import org.jactr.io2.jactr.modelFragment.Modify;
import org.jactr.io2.jactr.modelFragment.NotSlot;
import org.jactr.io2.jactr.modelFragment.OrSlot;
import org.jactr.io2.jactr.modelFragment.PackageDeclaration;
import org.jactr.io2.jactr.modelFragment.ParametersBlock;
import org.jactr.io2.jactr.modelFragment.Production;
import org.jactr.io2.jactr.modelFragment.Query;
import org.jactr.io2.jactr.modelFragment.Remove;
import org.jactr.io2.jactr.modelFragment.Script;
import org.jactr.io2.jactr.modelFragment.SimpleSlot;
import org.jactr.io2.jactr.modelFragment.Value;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class ModelFragmentLabelProvider extends DefaultEObjectLabelProvider {
  private final String IMAGE_HOME = "basic/";
  
  @Inject
  public ModelFragmentLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String image(final ModelFragment frag) {
    return (this.IMAGE_HOME + "jactr.gif");
  }
  
  public String image(final PackageDeclaration dec) {
    return (this.IMAGE_HOME + "library.gif");
  }
  
  public String image(final ModelExtension ext) {
    return (this.IMAGE_HOME + "extension.gif");
  }
  
  public String image(final ModelModule module) {
    return (this.IMAGE_HOME + "extension.gif");
  }
  
  public String text(final ParametersBlock parameters) {
    return "parameters";
  }
  
  public String text(final Chunks ele) {
    return ele.getType().getName();
  }
  
  public String image(final Chunks ele) {
    return (this.IMAGE_HOME + "chunktype.gif");
  }
  
  public String image(final ChunkType ele) {
    return (this.IMAGE_HOME + "chunktype.gif");
  }
  
  public String image(final ChunkDef ele) {
    return (this.IMAGE_HOME + "chunk.gif");
  }
  
  public String image(final Buffer b) {
    return (this.IMAGE_HOME + "buffer.gif");
  }
  
  public String image(final Production p) {
    return (this.IMAGE_HOME + "production.gif");
  }
  
  public String image(final Match m) {
    return (this.IMAGE_HOME + "pattern.gif");
  }
  
  public String text(final Match m) {
    return m.getName().getName();
  }
  
  public String image(final Query q) {
    return (this.IMAGE_HOME + "query.gif");
  }
  
  public String text(final Query q) {
    return q.getName().getName();
  }
  
  public String image(final Script s) {
    return (this.IMAGE_HOME + "script.gif");
  }
  
  public String image(final Add a) {
    return (this.IMAGE_HOME + "add.gif");
  }
  
  public String text(final Add a) {
    return a.getName().getName();
  }
  
  public String image(final Modify a) {
    return (this.IMAGE_HOME + "modify.gif");
  }
  
  public String text(final Modify a) {
    return a.getName().getName();
  }
  
  public String image(final Remove a) {
    return (this.IMAGE_HOME + "remove.gif");
  }
  
  public String text(final Remove a) {
    return a.getName().getName();
  }
  
  public String toString(final Value value) {
    String _name = value.getName();
    boolean _tripleNotEquals = (_name != null);
    if (_tripleNotEquals) {
      return value.getName();
    }
    String _string = value.getString();
    boolean _tripleNotEquals_1 = (_string != null);
    if (_tripleNotEquals_1) {
      return value.getString();
    }
    Boolean _boolean = value.getBoolean();
    boolean _tripleNotEquals_2 = (_boolean != null);
    if (_tripleNotEquals_2) {
      return value.getBoolean().toString();
    }
    Double _number = value.getNumber();
    boolean _notEquals = (!Objects.equal(_number, null));
    if (_notEquals) {
      return value.getNumber().toString();
    }
    return null;
  }
  
  public String text(final ConditionalSlot slot) {
    String _name = slot.getName();
    String _plus = (_name + " ");
    Condition _condition = slot.getCondition();
    String _plus_1 = (_plus + _condition);
    String _plus_2 = (_plus_1 + " ");
    String _string = this.toString(slot.getValue());
    return (_plus_2 + _string);
  }
  
  public String text(final SimpleSlot slot) {
    String _name = slot.getName();
    String _plus = (_name + " = ");
    String _string = this.toString(slot.getValue());
    return (_plus + _string);
  }
  
  public String image(final SimpleSlot slot) {
    return (this.IMAGE_HOME + "slot.gif");
  }
  
  public String image(final ConditionalSlot slot) {
    return (this.IMAGE_HOME + "slot.gif");
  }
  
  public String image(final OrSlot slot) {
    return (this.IMAGE_HOME + "slot.gif");
  }
  
  public String image(final AndSlot slot) {
    return (this.IMAGE_HOME + "slot.gif");
  }
  
  public String image(final NotSlot slot) {
    return (this.IMAGE_HOME + "slot.gif");
  }
  
  public String text(final OrSlot slot) {
    return "or";
  }
  
  public String text(final AndSlot slot) {
    return "and";
  }
  
  public String text(final NotSlot slot) {
    return "not";
  }
}
