/**
 * generated by Xtext 2.16.0
 */
package org.jactr.io2.jactr.ui.wizard;

import com.google.common.collect.Iterables;
import java.util.Collections;
import java.util.List;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.XtextProjectHelper;
import org.eclipse.xtext.ui.wizard.template.AbstractProjectTemplate;
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator;
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate;
import org.eclipse.xtext.ui.wizard.template.StringSelectionTemplateVariable;
import org.eclipse.xtext.ui.wizard.template.StringTemplateVariable;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@ProjectTemplate(label = "Empty Project", icon = "basic/jactr-project.gif", description = "<p><b>Empty Project</b></p>\n<p>Choose either basic or embodied project to start with</p>")
@SuppressWarnings("all")
public final class HelloWorldProject extends AbstractProjectTemplate {
  private final StringTemplateVariable namespace = this.text("Package:", "edu.institution.lab.project", 
    "The dotted package path to place for the model. Often reverse domain name.");

  private final StringSelectionTemplateVariable modelType = this.combo("Model Type:", new String[] { "Basic", "Embodied" }, "Type of model to generate");

  @Override
  protected IStatus validate() {
    Status _xifexpression = null;
    boolean _matches = this.namespace.getValue().matches("[a-z][a-z0-9_]*([\\.][a-z][a-z0-9_]*)*");
    if (_matches) {
      _xifexpression = null;
    } else {
      _xifexpression = new Status(IStatus.ERROR, "Wizard", (("\'" + this.namespace) + "\' is not a valid package name"));
    }
    return _xifexpression;
  }

  @Override
  public void generateProjects(final IProjectGenerator generator) {
    final boolean isEmbodied = this.modelType.getValue().equals("Embodied");
    ManifestContributingPluginProjectFactory _manifestContributingPluginProjectFactory = new ManifestContributingPluginProjectFactory();
    final Procedure1<ManifestContributingPluginProjectFactory> _function = (ManifestContributingPluginProjectFactory it) -> {
      final String path = this.namespace.getValue().replace(".", "/");
      it.setProjectName(this.getProjectInfo().getProjectName());
      it.setLocation(this.getProjectInfo().getLocationPath());
      if (isEmbodied) {
        it.getRequiredBundles().addAll(ModelStubs.embodiedModelDependencies());
      } else {
        it.getRequiredBundles().addAll(ModelStubs.basicModelDependencies());
      }
      List<String> _projectNatures = it.getProjectNatures();
      Iterables.<String>addAll(_projectNatures, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID, "org.jactr.eclipse.core.project.actrNature")));
      List<String> _builderIds = it.getBuilderIds();
      Iterables.<String>addAll(_builderIds, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID, "org.eclipse.pde.ManifestBuilder")));
      List<String> _folders = it.getFolders();
      Iterables.<String>addAll(_folders, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("src", "models")));
      if (isEmbodied) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("models/");
        _builder.append(path);
        _builder.append("/Model.jactr");
        String _plus = (this.namespace + ".Model");
        this.addFile(it, _builder, ModelStubs.embodiedModel(_plus));
      } else {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("models/");
        _builder_1.append(path);
        _builder_1.append("/Model.jactr");
        String _plus_1 = (this.namespace + ".Model");
        this.addFile(it, _builder_1, ModelStubs.basicModel(_plus_1));
      }
    };
    ManifestContributingPluginProjectFactory _doubleArrow = ObjectExtensions.<ManifestContributingPluginProjectFactory>operator_doubleArrow(_manifestContributingPluginProjectFactory, _function);
    generator.generate(_doubleArrow);
  }
}
