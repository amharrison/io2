/*
 * generated by Xtext 2.25.0
 */
package org.jactr.io2.jactr.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.jactr.io2.jactr.ide.contentassist.antlr.internal.InternalModelFragmentParser;
import org.jactr.io2.jactr.services.ModelFragmentGrammarAccess;

public class ModelFragmentParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ModelFragmentGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ModelFragmentGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getProductionConditionAccess().getAlternatives(), "rule__ProductionCondition__Alternatives");
			builder.put(grammarAccess.getProductionActionAccess().getAlternatives(), "rule__ProductionAction__Alternatives");
			builder.put(grammarAccess.getIsaBlockAccess().getAlternatives(), "rule__IsaBlock__Alternatives");
			builder.put(grammarAccess.getComplexSlotAccess().getAlternatives(), "rule__ComplexSlot__Alternatives");
			builder.put(grammarAccess.getBooleanOperationAccess().getAlternatives(), "rule__BooleanOperation__Alternatives");
			builder.put(grammarAccess.getConditionalSlotAccess().getNameAlternatives_0_0(), "rule__ConditionalSlot__NameAlternatives_0_0");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getValueAccess().getNameAlternatives_0_1_0(), "rule__Value__NameAlternatives_0_1_0");
			builder.put(grammarAccess.getBOOLEANAccess().getAlternatives(), "rule__BOOLEAN__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getModelModuleAccess().getGroup(), "rule__ModelModule__Group__0");
			builder.put(grammarAccess.getModelExtensionAccess().getGroup(), "rule__ModelExtension__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup(), "rule__Parameters__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup_3(), "rule__Parameters__Group_3__0");
			builder.put(grammarAccess.getChunksAccess().getGroup(), "rule__Chunks__Group__0");
			builder.put(grammarAccess.getChunksAccess().getGroup_2(), "rule__Chunks__Group_2__0");
			builder.put(grammarAccess.getChunkDefAccess().getGroup(), "rule__ChunkDef__Group__0");
			builder.put(grammarAccess.getChunkDefAccess().getGroup_2(), "rule__ChunkDef__Group_2__0");
			builder.put(grammarAccess.getChunkDefAccess().getGroup_2_2(), "rule__ChunkDef__Group_2_2__0");
			builder.put(grammarAccess.getChunkTypeAccess().getGroup(), "rule__ChunkType__Group__0");
			builder.put(grammarAccess.getChunkTypeAccess().getGroup_3(), "rule__ChunkType__Group_3__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getBuffersAccess().getGroup(), "rule__Buffers__Group__0");
			builder.put(grammarAccess.getBufferAccess().getGroup(), "rule__Buffer__Group__0");
			builder.put(grammarAccess.getProductionAccess().getGroup(), "rule__Production__Group__0");
			builder.put(grammarAccess.getMatchAccess().getGroup(), "rule__Match__Group__0");
			builder.put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
			builder.put(grammarAccess.getProxyAccess().getGroup(), "rule__Proxy__Group__0");
			builder.put(grammarAccess.getScriptAccess().getGroup(), "rule__Script__Group__0");
			builder.put(grammarAccess.getAddAccess().getGroup(), "rule__Add__Group__0");
			builder.put(grammarAccess.getRemoveAccess().getGroup(), "rule__Remove__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
			builder.put(grammarAccess.getSimpleSlotBlockAccess().getGroup(), "rule__SimpleSlotBlock__Group__0");
			builder.put(grammarAccess.getIsaBlockAccess().getGroup_0(), "rule__IsaBlock__Group_0__0");
			builder.put(grammarAccess.getSimpleSlotAccess().getGroup(), "rule__SimpleSlot__Group__0");
			builder.put(grammarAccess.getConditionalSlotAccess().getGroup(), "rule__ConditionalSlot__Group__0");
			builder.put(grammarAccess.getOrSlotAccess().getGroup(), "rule__OrSlot__Group__0");
			builder.put(grammarAccess.getAndSlotAccess().getGroup(), "rule__AndSlot__Group__0");
			builder.put(grammarAccess.getNotSlotAccess().getGroup(), "rule__NotSlot__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getParametersBlockAccess().getGroup(), "rule__ParametersBlock__Group__0");
			builder.put(grammarAccess.getValueAccess().getGroup_0(), "rule__Value__Group_0__0");
			builder.put(grammarAccess.getVARIABLEAccess().getGroup(), "rule__VARIABLE__Group__0");
			builder.put(grammarAccess.getNUMERICAccess().getGroup(), "rule__NUMERIC__Group__0");
			builder.put(grammarAccess.getNUMERICAccess().getGroup_2(), "rule__NUMERIC__Group_2__0");
			builder.put(grammarAccess.getModelFragmentAccess().getPackageAssignment(), "rule__ModelFragment__PackageAssignment");
			builder.put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getPackageDeclarationAccess().getImportsAssignment_3(), "rule__PackageDeclaration__ImportsAssignment_3");
			builder.put(grammarAccess.getPackageDeclarationAccess().getModulesAssignment_4(), "rule__PackageDeclaration__ModulesAssignment_4");
			builder.put(grammarAccess.getPackageDeclarationAccess().getExtensionsAssignment_5(), "rule__PackageDeclaration__ExtensionsAssignment_5");
			builder.put(grammarAccess.getPackageDeclarationAccess().getBuffersAssignment_6(), "rule__PackageDeclaration__BuffersAssignment_6");
			builder.put(grammarAccess.getPackageDeclarationAccess().getElementsAssignment_7(), "rule__PackageDeclaration__ElementsAssignment_7");
			builder.put(grammarAccess.getPackageDeclarationAccess().getParametersAssignment_9(), "rule__PackageDeclaration__ParametersAssignment_9");
			builder.put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getModelModuleAccess().getModuleClassAssignment_1(), "rule__ModelModule__ModuleClassAssignment_1");
			builder.put(grammarAccess.getModelModuleAccess().getParametersAssignment_2(), "rule__ModelModule__ParametersAssignment_2");
			builder.put(grammarAccess.getModelExtensionAccess().getExtensionClassAssignment_1(), "rule__ModelExtension__ExtensionClassAssignment_1");
			builder.put(grammarAccess.getModelExtensionAccess().getParametersAssignment_2(), "rule__ModelExtension__ParametersAssignment_2");
			builder.put(grammarAccess.getParametersAccess().getElementsAssignment_2(), "rule__Parameters__ElementsAssignment_2");
			builder.put(grammarAccess.getParametersAccess().getElementsAssignment_3_1(), "rule__Parameters__ElementsAssignment_3_1");
			builder.put(grammarAccess.getParametersAccess().getParametersAssignment_5(), "rule__Parameters__ParametersAssignment_5");
			builder.put(grammarAccess.getChunksAccess().getTypeAssignment_0(), "rule__Chunks__TypeAssignment_0");
			builder.put(grammarAccess.getChunksAccess().getChunksAssignment_1(), "rule__Chunks__ChunksAssignment_1");
			builder.put(grammarAccess.getChunksAccess().getChunksAssignment_2_1(), "rule__Chunks__ChunksAssignment_2_1");
			builder.put(grammarAccess.getChunkDefAccess().getNameAssignment_1(), "rule__ChunkDef__NameAssignment_1");
			builder.put(grammarAccess.getChunkDefAccess().getSlotsAssignment_2_1(), "rule__ChunkDef__SlotsAssignment_2_1");
			builder.put(grammarAccess.getChunkDefAccess().getSlotsAssignment_2_2_1(), "rule__ChunkDef__SlotsAssignment_2_2_1");
			builder.put(grammarAccess.getChunkDefAccess().getParametersAssignment_3(), "rule__ChunkDef__ParametersAssignment_3");
			builder.put(grammarAccess.getChunkTypeAccess().getNameAssignment_2(), "rule__ChunkType__NameAssignment_2");
			builder.put(grammarAccess.getChunkTypeAccess().getSuperTypeAssignment_3_1(), "rule__ChunkType__SuperTypeAssignment_3_1");
			builder.put(grammarAccess.getChunkTypeAccess().getSlotsAssignment_5(), "rule__ChunkType__SlotsAssignment_5");
			builder.put(grammarAccess.getChunkTypeAccess().getParametersAssignment_7(), "rule__ChunkType__ParametersAssignment_7");
			builder.put(grammarAccess.getOverridableAccess().getOverrideAssignment(), "rule__Overridable__OverrideAssignment");
			builder.put(grammarAccess.getBuffersAccess().getBuffersAssignment_3(), "rule__Buffers__BuffersAssignment_3");
			builder.put(grammarAccess.getBufferAccess().getNameAssignment_1(), "rule__Buffer__NameAssignment_1");
			builder.put(grammarAccess.getBufferAccess().getSourceAssignment_3(), "rule__Buffer__SourceAssignment_3");
			builder.put(grammarAccess.getBufferAccess().getParametersAssignment_5(), "rule__Buffer__ParametersAssignment_5");
			builder.put(grammarAccess.getProductionAccess().getNameAssignment_2(), "rule__Production__NameAssignment_2");
			builder.put(grammarAccess.getProductionAccess().getConditionsAssignment_4(), "rule__Production__ConditionsAssignment_4");
			builder.put(grammarAccess.getProductionAccess().getActionsAssignment_7(), "rule__Production__ActionsAssignment_7");
			builder.put(grammarAccess.getProductionAccess().getParametersAssignment_9(), "rule__Production__ParametersAssignment_9");
			builder.put(grammarAccess.getMatchAccess().getNameAssignment_0(), "rule__Match__NameAssignment_0");
			builder.put(grammarAccess.getMatchAccess().getIsaAssignment_2(), "rule__Match__IsaAssignment_2");
			builder.put(grammarAccess.getMatchAccess().getSlotsAssignment_3(), "rule__Match__SlotsAssignment_3");
			builder.put(grammarAccess.getQueryAccess().getNameAssignment_1(), "rule__Query__NameAssignment_1");
			builder.put(grammarAccess.getQueryAccess().getSlotsAssignment_3(), "rule__Query__SlotsAssignment_3");
			builder.put(grammarAccess.getProxyAccess().getNameAssignment_2(), "rule__Proxy__NameAssignment_2");
			builder.put(grammarAccess.getProxyAccess().getSlotsAssignment_5(), "rule__Proxy__SlotsAssignment_5");
			builder.put(grammarAccess.getScriptAccess().getLanguageAssignment_2(), "rule__Script__LanguageAssignment_2");
			builder.put(grammarAccess.getScriptAccess().getScriptAssignment_4(), "rule__Script__ScriptAssignment_4");
			builder.put(grammarAccess.getAddAccess().getNameAssignment_1(), "rule__Add__NameAssignment_1");
			builder.put(grammarAccess.getAddAccess().getIsaAssignment_3(), "rule__Add__IsaAssignment_3");
			builder.put(grammarAccess.getAddAccess().getSlotsAssignment_4(), "rule__Add__SlotsAssignment_4");
			builder.put(grammarAccess.getOutputAccess().getStringAssignment_2(), "rule__Output__StringAssignment_2");
			builder.put(grammarAccess.getSimpleSlotBlockAccess().getNameAssignment_0(), "rule__SimpleSlotBlock__NameAssignment_0");
			builder.put(grammarAccess.getSimpleSlotBlockAccess().getSlotsAssignment_2(), "rule__SimpleSlotBlock__SlotsAssignment_2");
			builder.put(grammarAccess.getIsaBlockAccess().getTypeAssignment_0_1(), "rule__IsaBlock__TypeAssignment_0_1");
			builder.put(grammarAccess.getIsaBlockAccess().getChunkAssignment_1(), "rule__IsaBlock__ChunkAssignment_1");
			builder.put(grammarAccess.getIsaBlockAccess().getNameAssignment_2(), "rule__IsaBlock__NameAssignment_2");
			builder.put(grammarAccess.getSimpleSlotAccess().getNameAssignment_0(), "rule__SimpleSlot__NameAssignment_0");
			builder.put(grammarAccess.getSimpleSlotAccess().getValueAssignment_2(), "rule__SimpleSlot__ValueAssignment_2");
			builder.put(grammarAccess.getConditionalSlotAccess().getNameAssignment_0(), "rule__ConditionalSlot__NameAssignment_0");
			builder.put(grammarAccess.getConditionalSlotAccess().getConditionAssignment_1(), "rule__ConditionalSlot__ConditionAssignment_1");
			builder.put(grammarAccess.getConditionalSlotAccess().getValueAssignment_2(), "rule__ConditionalSlot__ValueAssignment_2");
			builder.put(grammarAccess.getOrSlotAccess().getSlotsAssignment_3(), "rule__OrSlot__SlotsAssignment_3");
			builder.put(grammarAccess.getAndSlotAccess().getSlotsAssignment_3(), "rule__AndSlot__SlotsAssignment_3");
			builder.put(grammarAccess.getNotSlotAccess().getSlotsAssignment_3(), "rule__NotSlot__SlotsAssignment_3");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getValueAssignment_2(), "rule__Parameter__ValueAssignment_2");
			builder.put(grammarAccess.getParametersBlockAccess().getParameterAssignment_2(), "rule__ParametersBlock__ParameterAssignment_2");
			builder.put(grammarAccess.getValueAccess().getNameAssignment_0_1(), "rule__Value__NameAssignment_0_1");
			builder.put(grammarAccess.getValueAccess().getStringAssignment_1(), "rule__Value__StringAssignment_1");
			builder.put(grammarAccess.getValueAccess().getNumberAssignment_2(), "rule__Value__NumberAssignment_2");
			builder.put(grammarAccess.getValueAccess().getBooleanAssignment_3(), "rule__Value__BooleanAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ModelFragmentGrammarAccess grammarAccess;

	@Override
	protected InternalModelFragmentParser createParser() {
		InternalModelFragmentParser result = new InternalModelFragmentParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ModelFragmentGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ModelFragmentGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
