/**
 * generated by Xtext 2.16.0
 */
package org.jactr.io2.jactr.formatting2;

import com.google.common.base.Strings;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Pair;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.jactr.io2.jactr.modelFragment.Add;
import org.jactr.io2.jactr.modelFragment.AndSlot;
import org.jactr.io2.jactr.modelFragment.Buffer;
import org.jactr.io2.jactr.modelFragment.Buffers;
import org.jactr.io2.jactr.modelFragment.ChunkDef;
import org.jactr.io2.jactr.modelFragment.ChunkType;
import org.jactr.io2.jactr.modelFragment.Chunks;
import org.jactr.io2.jactr.modelFragment.ComplexSlot;
import org.jactr.io2.jactr.modelFragment.Condition;
import org.jactr.io2.jactr.modelFragment.ConditionalSlot;
import org.jactr.io2.jactr.modelFragment.Element;
import org.jactr.io2.jactr.modelFragment.Import;
import org.jactr.io2.jactr.modelFragment.IsaBlock;
import org.jactr.io2.jactr.modelFragment.Match;
import org.jactr.io2.jactr.modelFragment.ModelExtension;
import org.jactr.io2.jactr.modelFragment.ModelFragment;
import org.jactr.io2.jactr.modelFragment.ModelFragmentPackage;
import org.jactr.io2.jactr.modelFragment.ModelModule;
import org.jactr.io2.jactr.modelFragment.Modify;
import org.jactr.io2.jactr.modelFragment.NotSlot;
import org.jactr.io2.jactr.modelFragment.OrSlot;
import org.jactr.io2.jactr.modelFragment.Output;
import org.jactr.io2.jactr.modelFragment.PackageDeclaration;
import org.jactr.io2.jactr.modelFragment.Parameter;
import org.jactr.io2.jactr.modelFragment.Parameters;
import org.jactr.io2.jactr.modelFragment.ParametersBlock;
import org.jactr.io2.jactr.modelFragment.Production;
import org.jactr.io2.jactr.modelFragment.ProductionAction;
import org.jactr.io2.jactr.modelFragment.ProductionCondition;
import org.jactr.io2.jactr.modelFragment.Proxy;
import org.jactr.io2.jactr.modelFragment.Query;
import org.jactr.io2.jactr.modelFragment.Remove;
import org.jactr.io2.jactr.modelFragment.Script;
import org.jactr.io2.jactr.modelFragment.SimpleSlot;

@SuppressWarnings("all")
public class ModelFragmentFormatter extends AbstractFormatter2 {
  private boolean _tabularProductions = true;

  private boolean _tabularParameters = true;

  protected void _format(final ModelFragment modelFragment, @Extension final IFormattableDocument document) {
    document.<PackageDeclaration>format(modelFragment.getPackage());
    document.<ParametersBlock>format(modelFragment.getPackage().getParameters());
  }

  protected void _format(final PackageDeclaration dec, @Extension final IFormattableDocument document) {
    EList<Import> _imports = dec.getImports();
    for (final Import imp : _imports) {
      document.<Import>format(imp);
    }
    int _size = dec.getImports().size();
    boolean _greaterThan = (_size > 0);
    if (_greaterThan) {
      Import _last = dec.getImports().getLast();
      if (_last!=null) {
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 2, 3);
        };
        document.<Import>append(_last, _function);
      }
    }
    EList<ModelModule> _modules = dec.getModules();
    for (final ModelModule module : _modules) {
      document.<ModelModule>format(module);
    }
    int _size_1 = dec.getModules().size();
    boolean _greaterThan_1 = (_size_1 > 0);
    if (_greaterThan_1) {
      ModelModule _last_1 = dec.getModules().getLast();
      if (_last_1!=null) {
        final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 2, 3);
        };
        document.<ModelModule>append(_last_1, _function_1);
      }
    }
    EList<ModelExtension> _extensions = dec.getExtensions();
    for (final ModelExtension ext : _extensions) {
      document.<ModelExtension>format(ext);
    }
    int _size_2 = dec.getExtensions().size();
    boolean _greaterThan_2 = (_size_2 > 0);
    if (_greaterThan_2) {
      ModelExtension _last_2 = dec.getExtensions().getLast();
      if (_last_2!=null) {
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 2, 3);
        };
        document.<ModelExtension>append(_last_2, _function_2);
      }
    }
    document.<Buffers>format(dec.getBuffers());
    EList<Element> _elements = dec.getElements();
    for (final Element element : _elements) {
      document.<Element>format(element);
    }
  }

  protected void _format(final Buffers buffers, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 2, 3);
    };
    document.<Buffers>prepend(buffers, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(document.append(this.textRegionExtensions.regionFor(buffers).keyword("{"), _function_1), this.textRegionExtensions.regionFor(buffers).keyword("}"), _function_2);
    EList<Buffer> _buffers = buffers.getBuffers();
    for (final Buffer buffer : _buffers) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<Buffer>append(document.<Buffer>format(buffer), _function_3);
    }
  }

  protected void _format(final Buffer buffer, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 2, 3);
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 1);
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(buffer).keyword("@Override"), _function), _function_1);
    int _size = buffer.getSource().size();
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(document.append(this.textRegionExtensions.regionFor(buffer).keyword("{"), _function_2), this.textRegionExtensions.regionFor(buffer).keyword("}"), _function_3);
      EList<ChunkDef> _source = buffer.getSource();
      for (final ChunkDef slot : _source) {
        {
          document.<ChunkDef>format(slot);
          final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
            it.newLine();
          };
          document.<ChunkDef>append(slot, _function_4);
        }
      }
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(document.prepend(this.textRegionExtensions.regionFor(buffer).keyword("{"), _function_4), this.textRegionExtensions.regionFor(buffer).keyword("}"), _function_5);
    }
    document.<ParametersBlock>format(buffer.getParameters());
  }

  protected void _format(final Import imp, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 1);
    };
    document.<Import>prepend(imp, _function);
  }

  protected void _format(final ModelExtension ext, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 2, 3);
    };
    document.<ModelExtension>prepend(ext, _function);
    ParametersBlock _parameters = ext.getParameters();
    boolean _tripleNotEquals = (_parameters != null);
    if (_tripleNotEquals) {
      document.<ParametersBlock>format(ext.getParameters());
    }
  }

  protected void _format(final ModelModule module, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 2, 3);
    };
    document.<ModelModule>prepend(module, _function);
    ParametersBlock _parameters = module.getParameters();
    boolean _tripleNotEquals = (_parameters != null);
    if (_tripleNotEquals) {
      document.<ParametersBlock>format(module.getParameters());
    }
  }

  protected void _format(final Chunks chunk, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 2, 3);
    };
    document.<Chunks>prepend(chunk, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Chunks>interior(chunk, _function_1);
    List<ISemanticRegion> _keywords = this.textRegionExtensions.regionFor(chunk).keywords(",");
    for (final ISemanticRegion region : _keywords) {
      {
        final boolean nl = "]".equals(region.getPreviousSemanticRegion().getText());
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        document.prepend(region, _function_2);
        if (nl) {
          final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
            it.newLine();
            it.autowrap();
          };
          document.append(region, _function_3);
        } else {
          final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
            it.oneSpace();
            it.autowrap();
          };
          document.append(region, _function_4);
        }
      }
    }
    EList<ChunkDef> _chunks = chunk.getChunks();
    for (final ChunkDef c : _chunks) {
      document.<ChunkDef>format(c);
    }
  }

  protected void _format(final Parameters parameters, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 2, 3);
    };
    document.<Parameters>prepend(parameters, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Parameters>interior(parameters, _function_1);
    List<ISemanticRegion> _keywords = this.textRegionExtensions.regionFor(parameters).keywords(",");
    for (final ISemanticRegion region : _keywords) {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
        it.autowrap();
      };
      document.append(document.prepend(region, _function_2), _function_3);
    }
    document.<ParametersBlock>format(parameters.getParameters());
  }

  /**
   * chunk & type formatting
   */
  protected void _format(final ChunkDef chunk, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(this.textRegionExtensions.regionFor(chunk).keyword("("), this.textRegionExtensions.regionFor(chunk).keyword(")"), _function);
    List<ISemanticRegion> _keywords = this.textRegionExtensions.regionFor(chunk).keywords(",");
    for (final ISemanticRegion region : _keywords) {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(document.prepend(region, _function_1), _function_2);
    }
    EList<SimpleSlot> _slots = chunk.getSlots();
    for (final SimpleSlot slot : _slots) {
      document.<SimpleSlot>format(slot);
    }
    document.<ParametersBlock>format(chunk.getParameters());
  }

  protected void _format(final ChunkType chunkType, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 2, 3);
    };
    document.<ChunkType>prepend(chunkType, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(chunkType).feature(ModelFragmentPackage.Literals.OVERRIDABLE__NAME), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(chunkType).keyword("extends"), _function_2);
    int _size = chunkType.getSlots().size();
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(document.append(this.textRegionExtensions.regionFor(chunkType).keyword("{"), _function_3), document.prepend(this.textRegionExtensions.regionFor(chunkType).keyword("}"), _function_4), _function_5);
      try {
        final Function1<SimpleSlot, Integer> _function_6 = (SimpleSlot it) -> {
          return Integer.valueOf(this.textRegionExtensions.regionFor(it).feature(ModelFragmentPackage.Literals.SIMPLE_SLOT__NAME).getLength());
        };
        Integer _max = IterableExtensions.<Integer>max(ListExtensions.<SimpleSlot, Integer>map(chunkType.getSlots(), _function_6));
        final int width = ((_max).intValue() + 
          1);
        EList<SimpleSlot> _slots = chunkType.getSlots();
        for (final SimpleSlot slot : _slots) {
          {
            final ISemanticRegion region = this.textRegionExtensions.regionFor(slot).feature(ModelFragmentPackage.Literals.SIMPLE_SLOT__NAME);
            final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
              int _length = region.getLength();
              int _minus = (width - _length);
              it.setSpace(Strings.repeat(" ", _minus));
            };
            final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
              it.newLine();
            };
            document.prepend(document.append(region, _function_7), _function_8);
            final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
              it.oneSpace();
            };
            document.append(this.textRegionExtensions.regionFor(slot).keyword("="), _function_9);
          }
        }
      } catch (final Throwable _t) {
        if (_t instanceof Exception) {
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(document.prepend(this.textRegionExtensions.regionFor(chunkType).keyword("{"), _function_6), this.textRegionExtensions.regionFor(chunkType).keyword("}"), _function_7);
    }
    document.<ParametersBlock>format(chunkType.getParameters());
  }

  /**
   * Parameter formatting
   */
  protected void _format(final ParametersBlock parameters, @Extension final IFormattableDocument document) {
    int _size = parameters.getParameter().size();
    final boolean prepend = (_size > 1);
    if (this._tabularParameters) {
      try {
        int _size_1 = parameters.getParameter().size();
        boolean _greaterThan = (_size_1 > 0);
        if (_greaterThan) {
          final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
            it.indent();
          };
          document.<ParametersBlock>interior(parameters, _function);
          final Function1<Parameter, Integer> _function_1 = (Parameter it) -> {
            return Integer.valueOf(this.textRegionExtensions.regionFor(it).feature(ModelFragmentPackage.Literals.PARAMETER__NAME).getLength());
          };
          Integer _max = IterableExtensions.<Integer>max(ListExtensions.<Parameter, Integer>map(parameters.getParameter(), _function_1));
          final int width = ((_max).intValue() + 1);
          EList<Parameter> _parameter = parameters.getParameter();
          for (final Parameter p : _parameter) {
            {
              final ISemanticRegion region = this.textRegionExtensions.regionFor(p).feature(ModelFragmentPackage.Literals.PARAMETER__NAME);
              final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
                int _length = region.getLength();
                int _minus = (width - _length);
                it.setSpace(Strings.repeat(" ", _minus));
              };
              document.append(region, _function_2);
              final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
                it.oneSpace();
              };
              document.append(this.textRegionExtensions.regionFor(p).keyword(":"), _function_3);
              if (prepend) {
                final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
                  it.newLine();
                };
                document.<Parameter>prepend(p, _function_4);
              } else {
                final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
                  it.noSpace();
                };
                document.<Parameter>prepend(p, _function_5);
              }
            }
          }
        } else {
          final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
            it.noSpace();
          };
          document.<ISemanticRegion, ISemanticRegion>interior(this.textRegionExtensions.regionFor(parameters).keyword("["), this.textRegionExtensions.regionFor(parameters).keyword("]"), _function_2);
        }
      } catch (final Throwable _t) {
        if (_t instanceof Exception) {
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } else {
      int _size_1 = parameters.getParameter().size();
      boolean _greaterThan = (_size_1 > 0);
      if (_greaterThan) {
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        document.<ParametersBlock>interior(parameters, _function);
        EList<Parameter> _parameter = parameters.getParameter();
        for (final Parameter p : _parameter) {
          {
            final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
              it.oneSpace();
            };
            document.surround(this.textRegionExtensions.regionFor(p).keyword(":"), _function_1);
            if (prepend) {
              final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
                it.newLine();
              };
              document.<Parameter>prepend(p, _function_2);
            } else {
              final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
                it.noSpace();
              };
              document.<Parameter>prepend(p, _function_3);
            }
          }
        }
      } else {
        final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        document.<ISemanticRegion, ISemanticRegion>interior(this.textRegionExtensions.regionFor(parameters).keyword("["), this.textRegionExtensions.regionFor(parameters).keyword("]"), _function_1);
      }
    }
  }

  /**
   * Slot formatting
   */
  protected void _format(final SimpleSlot slot, @Extension final IFormattableDocument document) {
    EObject _eContainer = slot.eContainer();
    if ((_eContainer instanceof ChunkDef)) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.surround(this.textRegionExtensions.regionFor(document.<SimpleSlot>append(slot, _function)).keyword("="), _function_1);
    } else {
      EObject _eContainer_1 = slot.eContainer();
      if ((_eContainer_1 instanceof ChunkType)) {
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.oneSpace();
        };
        document.surround(this.textRegionExtensions.regionFor(document.<SimpleSlot>append(slot, _function_2)).keyword("="), _function_3);
      } else {
        if ((!this._tabularProductions)) {
          final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
            it.noSpace();
          };
          final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
            it.oneSpace();
          };
          document.surround(this.textRegionExtensions.regionFor(document.<SimpleSlot>append(slot, _function_4)).keyword("="), _function_5);
        } else {
          final Function1<EObject, Integer> _function_6 = (EObject it) -> {
            int _xblockexpression = (int) 0;
            {
              final ISemanticRegion region = this.textRegionExtensions.regionFor(it).feature(ModelFragmentPackage.Literals.SIMPLE_SLOT__NAME);
              int _xifexpression = (int) 0;
              if ((region != null)) {
                _xifexpression = region.getLength();
              } else {
                _xifexpression = 0;
              }
              _xblockexpression = _xifexpression;
            }
            return Integer.valueOf(_xblockexpression);
          };
          Integer _max = IteratorExtensions.<Integer>max(IteratorExtensions.<EObject, Integer>map(slot.eContainer().eAllContents(), _function_6));
          final int width = ((_max).intValue() + 1);
          final ISemanticRegion region = this.textRegionExtensions.regionFor(slot).feature(ModelFragmentPackage.Literals.SIMPLE_SLOT__NAME);
          final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
            int _length = region.getLength();
            int _minus = (width - _length);
            it.setSpace(Strings.repeat(" ", _minus));
          };
          final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
            it.newLine();
          };
          document.prepend(document.append(region, _function_7), _function_8);
        }
      }
    }
  }

  protected void _format(final ConditionalSlot slot, @Extension final IFormattableDocument document) {
    if ((!this._tabularProductions)) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.surround(this.textRegionExtensions.regionFor(document.<ConditionalSlot>append(slot, _function)).feature(ModelFragmentPackage.Literals.CONDITIONAL_SLOT__CONDITION), _function_1);
    } else {
      try {
        final Function1<EObject, Integer> _function_2 = (EObject it) -> {
          int _xblockexpression = (int) 0;
          {
            final ISemanticRegion region = this.textRegionExtensions.regionFor(it).feature(ModelFragmentPackage.Literals.CONDITIONAL_SLOT__NAME);
            int _xifexpression = (int) 0;
            if ((region != null)) {
              _xifexpression = region.getLength();
            } else {
              _xifexpression = 0;
            }
            _xblockexpression = _xifexpression;
          }
          return Integer.valueOf(_xblockexpression);
        };
        Integer _max = IteratorExtensions.<Integer>max(IteratorExtensions.<EObject, Integer>map(slot.eContainer().eAllContents(), _function_2));
        final int width = ((_max).intValue() + 1);
        final ISemanticRegion region = this.textRegionExtensions.regionFor(slot).feature(ModelFragmentPackage.Literals.CONDITIONAL_SLOT__NAME);
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          int _length = region.getLength();
          int _minus = (width - _length);
          it.setSpace(Strings.repeat(" ", _minus));
        };
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.prepend(document.append(region, _function_3), _function_4);
        Condition _condition = slot.getCondition();
        boolean _tripleEquals = (_condition == Condition.EQUALS);
        if (_tripleEquals) {
          final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
            it.setSpace("  ");
          };
          document.append(this.textRegionExtensions.regionFor(slot).feature(ModelFragmentPackage.Literals.CONDITIONAL_SLOT__CONDITION), _function_5);
        } else {
          final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
            it.oneSpace();
          };
          document.append(this.textRegionExtensions.regionFor(slot).feature(ModelFragmentPackage.Literals.CONDITIONAL_SLOT__CONDITION), _function_6);
        }
      } catch (final Throwable _t) {
        if (_t instanceof Exception) {
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    }
  }

  protected void _format(final OrSlot slotBlock, @Extension final IFormattableDocument document) {
    int _size = slotBlock.getSlots().size();
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(document.append(this.textRegionExtensions.regionFor(slotBlock).keyword("{"), _function), this.textRegionExtensions.regionFor(slotBlock).keyword("}"), _function_1);
      EList<ComplexSlot> _slots = slotBlock.getSlots();
      for (final ComplexSlot slot : _slots) {
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<ComplexSlot>append(document.<ComplexSlot>format(slot), _function_2);
      }
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(this.textRegionExtensions.regionFor(slotBlock).keyword("{"), this.textRegionExtensions.regionFor(slotBlock).keyword("}"), _function_3);
      EList<ComplexSlot> _slots_1 = slotBlock.getSlots();
      for (final ComplexSlot slot_1 : _slots_1) {
        document.<ComplexSlot>format(slot_1);
      }
    }
  }

  protected void _format(final AndSlot slotBlock, @Extension final IFormattableDocument document) {
    int _size = slotBlock.getSlots().size();
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(document.append(this.textRegionExtensions.regionFor(slotBlock).keyword("{"), _function), this.textRegionExtensions.regionFor(slotBlock).keyword("}"), _function_1);
      EList<ComplexSlot> _slots = slotBlock.getSlots();
      for (final ComplexSlot slot : _slots) {
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<ComplexSlot>append(document.<ComplexSlot>format(slot), _function_2);
      }
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(this.textRegionExtensions.regionFor(slotBlock).keyword("{"), this.textRegionExtensions.regionFor(slotBlock).keyword("}"), _function_3);
      EList<ComplexSlot> _slots_1 = slotBlock.getSlots();
      for (final ComplexSlot slot_1 : _slots_1) {
        document.<ComplexSlot>format(slot_1);
      }
    }
  }

  protected void _format(final NotSlot slotBlock, @Extension final IFormattableDocument document) {
    int _size = slotBlock.getSlots().size();
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(document.append(this.textRegionExtensions.regionFor(slotBlock).keyword("{"), _function), this.textRegionExtensions.regionFor(slotBlock).keyword("}"), _function_1);
      EList<ComplexSlot> _slots = slotBlock.getSlots();
      for (final ComplexSlot slot : _slots) {
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<ComplexSlot>append(document.<ComplexSlot>format(slot), _function_2);
      }
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(this.textRegionExtensions.regionFor(slotBlock).keyword("{"), this.textRegionExtensions.regionFor(slotBlock).keyword("}"), _function_3);
      EList<ComplexSlot> _slots_1 = slotBlock.getSlots();
      for (final ComplexSlot slot_1 : _slots_1) {
        document.<ComplexSlot>format(slot_1);
      }
    }
  }

  protected void _format(final Production production, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 2, 3);
    };
    document.<Production>prepend(production, _function);
    EList<ProductionCondition> _conditions = production.getConditions();
    for (final ProductionCondition condition : _conditions) {
      document.<ProductionCondition>format(condition);
    }
    Pair<ISemanticRegion, ISemanticRegion> pair = this.textRegionExtensions.regionFor(production).keywordPairs("}", "{").getLast();
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(pair.getKey(), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(pair.getValue(), _function_2);
    EList<ProductionAction> _actions = production.getActions();
    for (final ProductionAction action : _actions) {
      document.<ProductionAction>format(action);
    }
    document.<ParametersBlock>format(production.getParameters());
  }

  protected void _format(final Match pa, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Match>prepend(pa, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Match>surround(pa, _function_1);
    this.formatBraces(pa, document);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<IsaBlock>prepend(pa.getIsa(), _function_2);
    EList<ComplexSlot> _slots = pa.getSlots();
    for (final ComplexSlot slot : _slots) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<ComplexSlot>prepend(document.<ComplexSlot>format(slot), _function_3);
    }
  }

  protected void _format(final Query pa, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Query>prepend(pa, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Query>surround(pa, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(this.textRegionExtensions.regionFor(pa).keyword("?"), _function_2);
    this.formatBraces(pa, document);
    EList<ComplexSlot> _slots = pa.getSlots();
    for (final ComplexSlot slot : _slots) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<ComplexSlot>prepend(document.<ComplexSlot>format(slot), _function_3);
    }
  }

  protected void _format(final Add pa, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Add>prepend(pa, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Add>surround(pa, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(this.textRegionExtensions.regionFor(pa).keyword("+"), _function_2);
    this.formatBraces(pa, document);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<IsaBlock>prepend(pa.getIsa(), _function_3);
    EList<ConditionalSlot> _slots = pa.getSlots();
    for (final ConditionalSlot slot : _slots) {
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<ConditionalSlot>prepend(document.<ConditionalSlot>format(slot), _function_4);
    }
  }

  protected void _format(final Modify pa, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Modify>prepend(pa, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Modify>surround(pa, _function_1);
    this.formatBraces(pa, document);
    EList<SimpleSlot> _slots = pa.getSlots();
    for (final SimpleSlot slot : _slots) {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<SimpleSlot>prepend(document.<SimpleSlot>format(slot), _function_2);
    }
  }

  protected void _format(final Remove pa, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Remove>prepend(pa, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Remove>surround(pa, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(this.textRegionExtensions.regionFor(pa).keyword("-"), _function_2);
    this.formatBraces(pa, document);
    EList<SimpleSlot> _slots = pa.getSlots();
    for (final SimpleSlot slot : _slots) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<SimpleSlot>prepend(document.<SimpleSlot>format(slot), _function_3);
    }
  }

  protected void _format(final Output pa, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Output>prepend(pa, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Output>surround(pa, _function_1);
  }

  protected void _format(final Script pa, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Script>prepend(pa, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Script>surround(pa, _function_1);
  }

  protected void _format(final Proxy pa, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Proxy>prepend(pa, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Proxy>surround(pa, _function_1);
    this.formatBraces(pa, document);
    EList<SimpleSlot> _slots = pa.getSlots();
    for (final SimpleSlot slot : _slots) {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<SimpleSlot>prepend(document.<SimpleSlot>format(slot), _function_2);
    }
  }

  public void formatBraces(final EObject object, @Extension final IFormattableDocument document) {
    int _size = IteratorExtensions.size(object.eAllContents());
    boolean _greaterThan = (_size > 0);
    if (_greaterThan) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(document.append(this.textRegionExtensions.regionFor(object).keyword("{"), _function), document.prepend(document.append(this.textRegionExtensions.regionFor(object).keyword("}"), _function_1), _function_2), _function_3);
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(this.textRegionExtensions.regionFor(object).keyword("{"), this.textRegionExtensions.regionFor(object).keyword("}"), _function_4);
    }
  }

  public void format(final Object slotBlock, final IFormattableDocument document) {
    if (slotBlock instanceof XtextResource) {
      _format((XtextResource)slotBlock, document);
      return;
    } else if (slotBlock instanceof AndSlot) {
      _format((AndSlot)slotBlock, document);
      return;
    } else if (slotBlock instanceof NotSlot) {
      _format((NotSlot)slotBlock, document);
      return;
    } else if (slotBlock instanceof OrSlot) {
      _format((OrSlot)slotBlock, document);
      return;
    } else if (slotBlock instanceof Add) {
      _format((Add)slotBlock, document);
      return;
    } else if (slotBlock instanceof Buffer) {
      _format((Buffer)slotBlock, document);
      return;
    } else if (slotBlock instanceof ChunkDef) {
      _format((ChunkDef)slotBlock, document);
      return;
    } else if (slotBlock instanceof ChunkType) {
      _format((ChunkType)slotBlock, document);
      return;
    } else if (slotBlock instanceof Chunks) {
      _format((Chunks)slotBlock, document);
      return;
    } else if (slotBlock instanceof ConditionalSlot) {
      _format((ConditionalSlot)slotBlock, document);
      return;
    } else if (slotBlock instanceof Match) {
      _format((Match)slotBlock, document);
      return;
    } else if (slotBlock instanceof Modify) {
      _format((Modify)slotBlock, document);
      return;
    } else if (slotBlock instanceof Output) {
      _format((Output)slotBlock, document);
      return;
    } else if (slotBlock instanceof Parameters) {
      _format((Parameters)slotBlock, document);
      return;
    } else if (slotBlock instanceof Production) {
      _format((Production)slotBlock, document);
      return;
    } else if (slotBlock instanceof Proxy) {
      _format((Proxy)slotBlock, document);
      return;
    } else if (slotBlock instanceof Query) {
      _format((Query)slotBlock, document);
      return;
    } else if (slotBlock instanceof Remove) {
      _format((Remove)slotBlock, document);
      return;
    } else if (slotBlock instanceof Script) {
      _format((Script)slotBlock, document);
      return;
    } else if (slotBlock instanceof Buffers) {
      _format((Buffers)slotBlock, document);
      return;
    } else if (slotBlock instanceof Import) {
      _format((Import)slotBlock, document);
      return;
    } else if (slotBlock instanceof ModelExtension) {
      _format((ModelExtension)slotBlock, document);
      return;
    } else if (slotBlock instanceof ModelFragment) {
      _format((ModelFragment)slotBlock, document);
      return;
    } else if (slotBlock instanceof ModelModule) {
      _format((ModelModule)slotBlock, document);
      return;
    } else if (slotBlock instanceof PackageDeclaration) {
      _format((PackageDeclaration)slotBlock, document);
      return;
    } else if (slotBlock instanceof ParametersBlock) {
      _format((ParametersBlock)slotBlock, document);
      return;
    } else if (slotBlock instanceof SimpleSlot) {
      _format((SimpleSlot)slotBlock, document);
      return;
    } else if (slotBlock instanceof EObject) {
      _format((EObject)slotBlock, document);
      return;
    } else if (slotBlock == null) {
      _format((Void)null, document);
      return;
    } else if (slotBlock != null) {
      _format(slotBlock, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(slotBlock, document).toString());
    }
  }
}
