/**
 * generated by Xtext 2.25.0
 */
package org.jactr.io2.jactr.modelFragment.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.jactr.io2.jactr.modelFragment.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.jactr.io2.jactr.modelFragment.ModelFragmentPackage
 * @generated
 */
public class ModelFragmentSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ModelFragmentPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelFragmentSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ModelFragmentPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ModelFragmentPackage.MODEL_FRAGMENT:
      {
        ModelFragment modelFragment = (ModelFragment)theEObject;
        T result = caseModelFragment(modelFragment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.PACKAGE_DECLARATION:
      {
        PackageDeclaration packageDeclaration = (PackageDeclaration)theEObject;
        T result = casePackageDeclaration(packageDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.MODEL_MODULE:
      {
        ModelModule modelModule = (ModelModule)theEObject;
        T result = caseModelModule(modelModule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.MODEL_EXTENSION:
      {
        ModelExtension modelExtension = (ModelExtension)theEObject;
        T result = caseModelExtension(modelExtension);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.ELEMENT:
      {
        Element element = (Element)theEObject;
        T result = caseElement(element);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.PARAMETERS:
      {
        Parameters parameters = (Parameters)theEObject;
        T result = caseParameters(parameters);
        if (result == null) result = caseElement(parameters);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.CHUNKS:
      {
        Chunks chunks = (Chunks)theEObject;
        T result = caseChunks(chunks);
        if (result == null) result = caseElement(chunks);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.CHUNK_DEF:
      {
        ChunkDef chunkDef = (ChunkDef)theEObject;
        T result = caseChunkDef(chunkDef);
        if (result == null) result = caseOverridable(chunkDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.CHUNK_TYPE:
      {
        ChunkType chunkType = (ChunkType)theEObject;
        T result = caseChunkType(chunkType);
        if (result == null) result = caseElement(chunkType);
        if (result == null) result = caseOverridable(chunkType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.OVERRIDABLE:
      {
        Overridable overridable = (Overridable)theEObject;
        T result = caseOverridable(overridable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.BUFFERS:
      {
        Buffers buffers = (Buffers)theEObject;
        T result = caseBuffers(buffers);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.BUFFER:
      {
        Buffer buffer = (Buffer)theEObject;
        T result = caseBuffer(buffer);
        if (result == null) result = caseOverridable(buffer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.PRODUCTION:
      {
        Production production = (Production)theEObject;
        T result = caseProduction(production);
        if (result == null) result = caseElement(production);
        if (result == null) result = caseOverridable(production);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.PRODUCTION_CONDITION:
      {
        ProductionCondition productionCondition = (ProductionCondition)theEObject;
        T result = caseProductionCondition(productionCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.MATCH:
      {
        Match match = (Match)theEObject;
        T result = caseMatch(match);
        if (result == null) result = caseProductionCondition(match);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.QUERY:
      {
        Query query = (Query)theEObject;
        T result = caseQuery(query);
        if (result == null) result = caseProductionCondition(query);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.PROXY:
      {
        Proxy proxy = (Proxy)theEObject;
        T result = caseProxy(proxy);
        if (result == null) result = caseProductionCondition(proxy);
        if (result == null) result = caseProductionAction(proxy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.SCRIPT:
      {
        Script script = (Script)theEObject;
        T result = caseScript(script);
        if (result == null) result = caseProductionCondition(script);
        if (result == null) result = caseProductionAction(script);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.PRODUCTION_ACTION:
      {
        ProductionAction productionAction = (ProductionAction)theEObject;
        T result = caseProductionAction(productionAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.ADD:
      {
        Add add = (Add)theEObject;
        T result = caseAdd(add);
        if (result == null) result = caseProductionAction(add);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.REMOVE:
      {
        Remove remove = (Remove)theEObject;
        T result = caseRemove(remove);
        if (result == null) result = caseProductionAction(remove);
        if (result == null) result = caseSimpleSlotBlock(remove);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.MODIFY:
      {
        Modify modify = (Modify)theEObject;
        T result = caseModify(modify);
        if (result == null) result = caseProductionAction(modify);
        if (result == null) result = caseSimpleSlotBlock(modify);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.OUTPUT:
      {
        Output output = (Output)theEObject;
        T result = caseOutput(output);
        if (result == null) result = caseProductionAction(output);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.SIMPLE_SLOT_BLOCK:
      {
        SimpleSlotBlock simpleSlotBlock = (SimpleSlotBlock)theEObject;
        T result = caseSimpleSlotBlock(simpleSlotBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.ISA_BLOCK:
      {
        IsaBlock isaBlock = (IsaBlock)theEObject;
        T result = caseIsaBlock(isaBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.SIMPLE_SLOT:
      {
        SimpleSlot simpleSlot = (SimpleSlot)theEObject;
        T result = caseSimpleSlot(simpleSlot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.COMPLEX_SLOT:
      {
        ComplexSlot complexSlot = (ComplexSlot)theEObject;
        T result = caseComplexSlot(complexSlot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.BOOLEAN_OPERATION:
      {
        BooleanOperation booleanOperation = (BooleanOperation)theEObject;
        T result = caseBooleanOperation(booleanOperation);
        if (result == null) result = caseComplexSlot(booleanOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.CONDITIONAL_SLOT:
      {
        ConditionalSlot conditionalSlot = (ConditionalSlot)theEObject;
        T result = caseConditionalSlot(conditionalSlot);
        if (result == null) result = caseComplexSlot(conditionalSlot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.OR_SLOT:
      {
        OrSlot orSlot = (OrSlot)theEObject;
        T result = caseOrSlot(orSlot);
        if (result == null) result = caseBooleanOperation(orSlot);
        if (result == null) result = caseComplexSlot(orSlot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.AND_SLOT:
      {
        AndSlot andSlot = (AndSlot)theEObject;
        T result = caseAndSlot(andSlot);
        if (result == null) result = caseBooleanOperation(andSlot);
        if (result == null) result = caseComplexSlot(andSlot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.NOT_SLOT:
      {
        NotSlot notSlot = (NotSlot)theEObject;
        T result = caseNotSlot(notSlot);
        if (result == null) result = caseBooleanOperation(notSlot);
        if (result == null) result = caseComplexSlot(notSlot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.PARAMETERS_BLOCK:
      {
        ParametersBlock parametersBlock = (ParametersBlock)theEObject;
        T result = caseParametersBlock(parametersBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelFragmentPackage.VALUE:
      {
        Value value = (Value)theEObject;
        T result = caseValue(value);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Fragment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Fragment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelFragment(ModelFragment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Package Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Package Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackageDeclaration(PackageDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelModule(ModelModule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Extension</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Extension</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelExtension(ModelExtension object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElement(Element object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameters</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameters</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameters(Parameters object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chunks</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chunks</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChunks(Chunks object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chunk Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chunk Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChunkDef(ChunkDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chunk Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chunk Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChunkType(ChunkType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Overridable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Overridable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOverridable(Overridable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Buffers</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Buffers</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBuffers(Buffers object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Buffer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Buffer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBuffer(Buffer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Production</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Production</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProduction(Production object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Production Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Production Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProductionCondition(ProductionCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Match</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Match</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMatch(Match object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuery(Query object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Proxy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Proxy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProxy(Proxy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Script</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Script</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScript(Script object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Production Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Production Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProductionAction(ProductionAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdd(Add object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemove(Remove object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modify</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modify</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModify(Modify object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutput(Output object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Slot Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Slot Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleSlotBlock(SimpleSlotBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Isa Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Isa Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIsaBlock(IsaBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Slot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Slot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleSlot(SimpleSlot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex Slot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex Slot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplexSlot(ComplexSlot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanOperation(BooleanOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional Slot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional Slot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionalSlot(ConditionalSlot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or Slot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or Slot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrSlot(OrSlot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Slot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Slot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndSlot(AndSlot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Slot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Slot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotSlot(NotSlot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameters Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameters Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParametersBlock(ParametersBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValue(Value object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ModelFragmentSwitch
