/**
 * generated by Xtext 2.25.0
 */
package org.jactr.io2.jactr.modelFragment.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.jactr.io2.jactr.modelFragment.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.jactr.io2.jactr.modelFragment.ModelFragmentPackage
 * @generated
 */
public class ModelFragmentAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ModelFragmentPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelFragmentAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ModelFragmentPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelFragmentSwitch<Adapter> modelSwitch =
    new ModelFragmentSwitch<Adapter>()
    {
      @Override
      public Adapter caseModelFragment(ModelFragment object)
      {
        return createModelFragmentAdapter();
      }
      @Override
      public Adapter casePackageDeclaration(PackageDeclaration object)
      {
        return createPackageDeclarationAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseModelModule(ModelModule object)
      {
        return createModelModuleAdapter();
      }
      @Override
      public Adapter caseModelExtension(ModelExtension object)
      {
        return createModelExtensionAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseParameters(Parameters object)
      {
        return createParametersAdapter();
      }
      @Override
      public Adapter caseChunks(Chunks object)
      {
        return createChunksAdapter();
      }
      @Override
      public Adapter caseChunkDef(ChunkDef object)
      {
        return createChunkDefAdapter();
      }
      @Override
      public Adapter caseChunkType(ChunkType object)
      {
        return createChunkTypeAdapter();
      }
      @Override
      public Adapter caseOverridable(Overridable object)
      {
        return createOverridableAdapter();
      }
      @Override
      public Adapter caseBuffers(Buffers object)
      {
        return createBuffersAdapter();
      }
      @Override
      public Adapter caseBuffer(Buffer object)
      {
        return createBufferAdapter();
      }
      @Override
      public Adapter caseProduction(Production object)
      {
        return createProductionAdapter();
      }
      @Override
      public Adapter caseProductionCondition(ProductionCondition object)
      {
        return createProductionConditionAdapter();
      }
      @Override
      public Adapter caseMatch(Match object)
      {
        return createMatchAdapter();
      }
      @Override
      public Adapter caseQuery(Query object)
      {
        return createQueryAdapter();
      }
      @Override
      public Adapter caseProxy(Proxy object)
      {
        return createProxyAdapter();
      }
      @Override
      public Adapter caseScript(Script object)
      {
        return createScriptAdapter();
      }
      @Override
      public Adapter caseProductionAction(ProductionAction object)
      {
        return createProductionActionAdapter();
      }
      @Override
      public Adapter caseAdd(Add object)
      {
        return createAddAdapter();
      }
      @Override
      public Adapter caseRemove(Remove object)
      {
        return createRemoveAdapter();
      }
      @Override
      public Adapter caseModify(Modify object)
      {
        return createModifyAdapter();
      }
      @Override
      public Adapter caseOutput(Output object)
      {
        return createOutputAdapter();
      }
      @Override
      public Adapter caseSimpleSlotBlock(SimpleSlotBlock object)
      {
        return createSimpleSlotBlockAdapter();
      }
      @Override
      public Adapter caseIsaBlock(IsaBlock object)
      {
        return createIsaBlockAdapter();
      }
      @Override
      public Adapter caseSimpleSlot(SimpleSlot object)
      {
        return createSimpleSlotAdapter();
      }
      @Override
      public Adapter caseComplexSlot(ComplexSlot object)
      {
        return createComplexSlotAdapter();
      }
      @Override
      public Adapter caseBooleanOperation(BooleanOperation object)
      {
        return createBooleanOperationAdapter();
      }
      @Override
      public Adapter caseConditionalSlot(ConditionalSlot object)
      {
        return createConditionalSlotAdapter();
      }
      @Override
      public Adapter caseOrSlot(OrSlot object)
      {
        return createOrSlotAdapter();
      }
      @Override
      public Adapter caseAndSlot(AndSlot object)
      {
        return createAndSlotAdapter();
      }
      @Override
      public Adapter caseNotSlot(NotSlot object)
      {
        return createNotSlotAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseParametersBlock(ParametersBlock object)
      {
        return createParametersBlockAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.ModelFragment <em>Model Fragment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.ModelFragment
   * @generated
   */
  public Adapter createModelFragmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.PackageDeclaration <em>Package Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.PackageDeclaration
   * @generated
   */
  public Adapter createPackageDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.ModelModule <em>Model Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.ModelModule
   * @generated
   */
  public Adapter createModelModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.ModelExtension <em>Model Extension</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.ModelExtension
   * @generated
   */
  public Adapter createModelExtensionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Parameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Parameters
   * @generated
   */
  public Adapter createParametersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Chunks <em>Chunks</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Chunks
   * @generated
   */
  public Adapter createChunksAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.ChunkDef <em>Chunk Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.ChunkDef
   * @generated
   */
  public Adapter createChunkDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.ChunkType <em>Chunk Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.ChunkType
   * @generated
   */
  public Adapter createChunkTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Overridable <em>Overridable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Overridable
   * @generated
   */
  public Adapter createOverridableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Buffers <em>Buffers</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Buffers
   * @generated
   */
  public Adapter createBuffersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Buffer <em>Buffer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Buffer
   * @generated
   */
  public Adapter createBufferAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Production <em>Production</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Production
   * @generated
   */
  public Adapter createProductionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.ProductionCondition <em>Production Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.ProductionCondition
   * @generated
   */
  public Adapter createProductionConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Match <em>Match</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Match
   * @generated
   */
  public Adapter createMatchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Query <em>Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Query
   * @generated
   */
  public Adapter createQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Proxy <em>Proxy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Proxy
   * @generated
   */
  public Adapter createProxyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Script <em>Script</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Script
   * @generated
   */
  public Adapter createScriptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.ProductionAction <em>Production Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.ProductionAction
   * @generated
   */
  public Adapter createProductionActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Add <em>Add</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Add
   * @generated
   */
  public Adapter createAddAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Remove <em>Remove</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Remove
   * @generated
   */
  public Adapter createRemoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Modify <em>Modify</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Modify
   * @generated
   */
  public Adapter createModifyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Output <em>Output</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Output
   * @generated
   */
  public Adapter createOutputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.SimpleSlotBlock <em>Simple Slot Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.SimpleSlotBlock
   * @generated
   */
  public Adapter createSimpleSlotBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.IsaBlock <em>Isa Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.IsaBlock
   * @generated
   */
  public Adapter createIsaBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.SimpleSlot <em>Simple Slot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.SimpleSlot
   * @generated
   */
  public Adapter createSimpleSlotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.ComplexSlot <em>Complex Slot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.ComplexSlot
   * @generated
   */
  public Adapter createComplexSlotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.BooleanOperation <em>Boolean Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.BooleanOperation
   * @generated
   */
  public Adapter createBooleanOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.ConditionalSlot <em>Conditional Slot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.ConditionalSlot
   * @generated
   */
  public Adapter createConditionalSlotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.OrSlot <em>Or Slot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.OrSlot
   * @generated
   */
  public Adapter createOrSlotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.AndSlot <em>And Slot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.AndSlot
   * @generated
   */
  public Adapter createAndSlotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.NotSlot <em>Not Slot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.NotSlot
   * @generated
   */
  public Adapter createNotSlotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.ParametersBlock <em>Parameters Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.ParametersBlock
   * @generated
   */
  public Adapter createParametersBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.jactr.io2.jactr.modelFragment.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.jactr.io2.jactr.modelFragment.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ModelFragmentAdapterFactory
