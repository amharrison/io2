/*
 * generated by Xtext 2.25.0
 */
package org.jactr.io2.jactr.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ModelFragmentGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.ModelFragment");
		private final Assignment cPackageAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagePackageDeclarationParserRuleCall_0 = (RuleCall)cPackageAssignment.eContents().get(0);
		
		////import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
		//ModelFragment:
		//  package=PackageDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//package=PackageDeclaration
		public Assignment getPackageAssignment() { return cPackageAssignment; }
		
		//PackageDeclaration
		public RuleCall getPackagePackageDeclarationParserRuleCall_0() { return cPackagePackageDeclarationParserRuleCall_0; }
	}
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cModulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModulesModelModuleParserRuleCall_4_0 = (RuleCall)cModulesAssignment_4.eContents().get(0);
		private final Assignment cExtensionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExtensionsModelExtensionParserRuleCall_5_0 = (RuleCall)cExtensionsAssignment_5.eContents().get(0);
		private final Assignment cBuffersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBuffersBuffersParserRuleCall_6_0 = (RuleCall)cBuffersAssignment_6.eContents().get(0);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsElementParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cParametersAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cParametersParametersBlockParserRuleCall_9_0 = (RuleCall)cParametersAssignment_9.eContents().get(0);
		
		//PackageDeclaration:
		//  'namespace' name=QualifiedName '{'
		//  (imports+=Import)*
		//  (modules+=ModelModule)*
		//  (extensions+=ModelExtension)*
		//  (buffers=Buffers)?
		//  (elements+=Element)*
		//  '}'
		//  parameters=ParametersBlock?;
		@Override public ParserRule getRule() { return rule; }
		
		//'namespace' name=QualifiedName '{'
		//(imports+=Import)*
		//(modules+=ModelModule)*
		//(extensions+=ModelExtension)*
		//(buffers=Buffers)?
		//(elements+=Element)*
		//'}'
		//parameters=ParametersBlock?
		public Group getGroup() { return cGroup; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(imports+=Import)*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//(modules+=ModelModule)*
		public Assignment getModulesAssignment_4() { return cModulesAssignment_4; }
		
		//ModelModule
		public RuleCall getModulesModelModuleParserRuleCall_4_0() { return cModulesModelModuleParserRuleCall_4_0; }
		
		//(extensions+=ModelExtension)*
		public Assignment getExtensionsAssignment_5() { return cExtensionsAssignment_5; }
		
		//ModelExtension
		public RuleCall getExtensionsModelExtensionParserRuleCall_5_0() { return cExtensionsModelExtensionParserRuleCall_5_0; }
		
		//(buffers=Buffers)?
		public Assignment getBuffersAssignment_6() { return cBuffersAssignment_6; }
		
		//Buffers
		public RuleCall getBuffersBuffersParserRuleCall_6_0() { return cBuffersBuffersParserRuleCall_6_0; }
		
		//(elements+=Element)*
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_7_0() { return cElementsElementParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//parameters=ParametersBlock?
		public Assignment getParametersAssignment_9() { return cParametersAssignment_9; }
		
		//ParametersBlock
		public RuleCall getParametersParametersBlockParserRuleCall_9_0() { return cParametersParametersBlockParserRuleCall_9_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//  'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class ModelModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.ModelModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleClassSTRINGTerminalRuleCall_1_0 = (RuleCall)cModuleClassAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParametersBlockParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		
		//ModelModule:
		//  'module' moduleClass=STRING parameters=ParametersBlock?;
		@Override public ParserRule getRule() { return rule; }
		
		//'module' moduleClass=STRING parameters=ParametersBlock?
		public Group getGroup() { return cGroup; }
		
		//'module'
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }
		
		//moduleClass=STRING
		public Assignment getModuleClassAssignment_1() { return cModuleClassAssignment_1; }
		
		//STRING
		public RuleCall getModuleClassSTRINGTerminalRuleCall_1_0() { return cModuleClassSTRINGTerminalRuleCall_1_0; }
		
		//parameters=ParametersBlock?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//ParametersBlock
		public RuleCall getParametersParametersBlockParserRuleCall_2_0() { return cParametersParametersBlockParserRuleCall_2_0; }
	}
	public class ModelExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.ModelExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExtensionClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExtensionClassSTRINGTerminalRuleCall_1_0 = (RuleCall)cExtensionClassAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParametersBlockParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		
		//ModelExtension:
		//  'extension' extensionClass=STRING parameters=ParametersBlock?;
		@Override public ParserRule getRule() { return rule; }
		
		//'extension' extensionClass=STRING parameters=ParametersBlock?
		public Group getGroup() { return cGroup; }
		
		//'extension'
		public Keyword getExtensionKeyword_0() { return cExtensionKeyword_0; }
		
		//extensionClass=STRING
		public Assignment getExtensionClassAssignment_1() { return cExtensionClassAssignment_1; }
		
		//STRING
		public RuleCall getExtensionClassSTRINGTerminalRuleCall_1_0() { return cExtensionClassSTRINGTerminalRuleCall_1_0; }
		
		//parameters=ParametersBlock?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//ParametersBlock
		public RuleCall getParametersParametersBlockParserRuleCall_2_0() { return cParametersParametersBlockParserRuleCall_2_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChunkTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChunksParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProductionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParametersParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element:
		//  ChunkType | Chunks | Production | Parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//ChunkType | Chunks | Production | Parameters
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ChunkType
		public RuleCall getChunkTypeParserRuleCall_0() { return cChunkTypeParserRuleCall_0; }
		
		//Chunks
		public RuleCall getChunksParserRuleCall_1() { return cChunksParserRuleCall_1; }
		
		//Production
		public RuleCall getProductionParserRuleCall_2() { return cProductionParserRuleCall_2; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall_3() { return cParametersParserRuleCall_3; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParametersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsIDTerminalRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsIDTerminalRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersParametersBlockParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		
		//Parameters: 'parameters''('elements+=ID (','elements+=ID)* ')' parameters=ParametersBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'parameters''('elements+=ID (','elements+=ID)* ')' parameters=ParametersBlock
		public Group getGroup() { return cGroup; }
		
		//'parameters'
		public Keyword getParametersKeyword_0() { return cParametersKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elements+=ID
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//ID
		public RuleCall getElementsIDTerminalRuleCall_2_0() { return cElementsIDTerminalRuleCall_2_0; }
		
		//(','elements+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//elements+=ID
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }
		
		//ID
		public RuleCall getElementsIDTerminalRuleCall_3_1_0() { return cElementsIDTerminalRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//parameters=ParametersBlock
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }
		
		//ParametersBlock
		public RuleCall getParametersParametersBlockParserRuleCall_5_0() { return cParametersParametersBlockParserRuleCall_5_0; }
	}
	public class ChunksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Chunks");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeChunkTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeChunkTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeChunkTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cChunksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChunksChunkDefParserRuleCall_1_0 = (RuleCall)cChunksAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cChunksAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cChunksChunkDefParserRuleCall_2_1_0 = (RuleCall)cChunksAssignment_2_1.eContents().get(0);
		
		//Chunks:
		//  type=[ChunkType|QualifiedName] chunks+=ChunkDef (',' chunks+=ChunkDef)*;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[ChunkType|QualifiedName] chunks+=ChunkDef (',' chunks+=ChunkDef)*
		public Group getGroup() { return cGroup; }
		
		//type=[ChunkType|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[ChunkType|QualifiedName]
		public CrossReference getTypeChunkTypeCrossReference_0_0() { return cTypeChunkTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getTypeChunkTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeChunkTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//chunks+=ChunkDef
		public Assignment getChunksAssignment_1() { return cChunksAssignment_1; }
		
		//ChunkDef
		public RuleCall getChunksChunkDefParserRuleCall_1_0() { return cChunksChunkDefParserRuleCall_1_0; }
		
		//(',' chunks+=ChunkDef)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//chunks+=ChunkDef
		public Assignment getChunksAssignment_2_1() { return cChunksAssignment_2_1; }
		
		//ChunkDef
		public RuleCall getChunksChunkDefParserRuleCall_2_1_0() { return cChunksChunkDefParserRuleCall_2_1_0; }
	}
	public class ChunkDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.ChunkDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOverridableParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSlotsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSlotsSimpleSlotParserRuleCall_2_1_0 = (RuleCall)cSlotsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSlotsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSlotsSimpleSlotParserRuleCall_2_2_1_0 = (RuleCall)cSlotsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParametersBlockParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		
		//ChunkDef:
		//  Overridable
		//  name=ID
		//  ('(' slots+=SimpleSlot (',' slots+=SimpleSlot)* ')')?
		//  parameters=ParametersBlock?;
		@Override public ParserRule getRule() { return rule; }
		
		//Overridable
		//name=ID
		//('(' slots+=SimpleSlot (',' slots+=SimpleSlot)* ')')?
		//parameters=ParametersBlock?
		public Group getGroup() { return cGroup; }
		
		//Overridable
		public RuleCall getOverridableParserRuleCall_0() { return cOverridableParserRuleCall_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' slots+=SimpleSlot (',' slots+=SimpleSlot)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//slots+=SimpleSlot
		public Assignment getSlotsAssignment_2_1() { return cSlotsAssignment_2_1; }
		
		//SimpleSlot
		public RuleCall getSlotsSimpleSlotParserRuleCall_2_1_0() { return cSlotsSimpleSlotParserRuleCall_2_1_0; }
		
		//(',' slots+=SimpleSlot)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//slots+=SimpleSlot
		public Assignment getSlotsAssignment_2_2_1() { return cSlotsAssignment_2_2_1; }
		
		//SimpleSlot
		public RuleCall getSlotsSimpleSlotParserRuleCall_2_2_1_0() { return cSlotsSimpleSlotParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//parameters=ParametersBlock?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }
		
		//ParametersBlock
		public RuleCall getParametersParametersBlockParserRuleCall_3_0() { return cParametersParametersBlockParserRuleCall_3_0; }
	}
	public class ChunkTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.ChunkType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOverridableParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cChunktypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperTypeChunkTypeCrossReference_3_1_0 = (CrossReference)cSuperTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperTypeChunkTypeQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperTypeChunkTypeCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSlotsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSlotsSimpleSlotParserRuleCall_5_0 = (RuleCall)cSlotsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cParametersParametersBlockParserRuleCall_7_0 = (RuleCall)cParametersAssignment_7.eContents().get(0);
		
		//ChunkType:
		//  Overridable
		//  'chunktype' name=ID ('extends' superType=[ChunkType|QualifiedName]
		//  //ignore multiple inheritance for now
		//  /*(',' superType+=[ChunkType|QualifiedName])? */)?
		//  '{'
		//  (slots+=SimpleSlot)* '}'
		//  parameters=ParametersBlock?;
		@Override public ParserRule getRule() { return rule; }
		
		//Overridable
		//'chunktype' name=ID ('extends' superType=[ChunkType|QualifiedName]
		////ignore multiple inheritance for now
		///*(',' superType+=[ChunkType|QualifiedName])? */)?
		//'{'
		//(slots+=SimpleSlot)* '}'
		//parameters=ParametersBlock?
		public Group getGroup() { return cGroup; }
		
		//Overridable
		public RuleCall getOverridableParserRuleCall_0() { return cOverridableParserRuleCall_0; }
		
		//'chunktype'
		public Keyword getChunktypeKeyword_1() { return cChunktypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' superType=[ChunkType|QualifiedName]
		// //ignore multiple inheritance for now
		// /*(',' superType+=[ChunkType|QualifiedName])? */)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superType=[ChunkType|QualifiedName]
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }
		
		//[ChunkType|QualifiedName]
		public CrossReference getSuperTypeChunkTypeCrossReference_3_1_0() { return cSuperTypeChunkTypeCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getSuperTypeChunkTypeQualifiedNameParserRuleCall_3_1_0_1() { return cSuperTypeChunkTypeQualifiedNameParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(slots+=SimpleSlot)*
		public Assignment getSlotsAssignment_5() { return cSlotsAssignment_5; }
		
		//SimpleSlot
		public RuleCall getSlotsSimpleSlotParserRuleCall_5_0() { return cSlotsSimpleSlotParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//parameters=ParametersBlock?
		public Assignment getParametersAssignment_7() { return cParametersAssignment_7; }
		
		//ParametersBlock
		public RuleCall getParametersParametersBlockParserRuleCall_7_0() { return cParametersParametersBlockParserRuleCall_7_0; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//  //@Override
		//QualifiedNameWithWildcard:
		//  QualifiedName '.*';
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//  //@Override
		//QualifiedName:
		//  ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class OverridableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Overridable");
		private final Assignment cOverrideAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOverrideOVERRIDEParserRuleCall_0 = (RuleCall)cOverrideAssignment.eContents().get(0);
		
		//fragment Overridable : (override?=OVERRIDE)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(override?=OVERRIDE)?
		public Assignment getOverrideAssignment() { return cOverrideAssignment; }
		
		//OVERRIDE
		public RuleCall getOverrideOVERRIDEParserRuleCall_0() { return cOverrideOVERRIDEParserRuleCall_0; }
	}
	public class BuffersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Buffers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuffersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBuffersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBuffersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBuffersBufferParserRuleCall_3_0 = (RuleCall)cBuffersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//  //terminal VARIABLE:
		////  '='  ('a'..'z' | 'A'..'Z' | '0'..'9' | '-' )* ('a'..'z' | 'A'..'Z' | '0'..'9');
		//Buffers : {Buffers} 'buffers''{' (buffers+=Buffer)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Buffers} 'buffers''{' (buffers+=Buffer)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Buffers}
		public Action getBuffersAction_0() { return cBuffersAction_0; }
		
		//'buffers'
		public Keyword getBuffersKeyword_1() { return cBuffersKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(buffers+=Buffer)*
		public Assignment getBuffersAssignment_3() { return cBuffersAssignment_3; }
		
		//Buffer
		public RuleCall getBuffersBufferParserRuleCall_3_0() { return cBuffersBufferParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BufferElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Buffer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOverridableParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceChunkDefCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceChunkDefQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cSourceChunkDefCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersParametersBlockParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		
		///**
		// * Buffer block
		// */
		//Buffer:
		//  Overridable
		//   name=ID '{'
		//  (source+=[ChunkDef|QualifiedName])*
		//  '}' parameters=ParametersBlock?;
		@Override public ParserRule getRule() { return rule; }
		
		//Overridable
		// name=ID '{'
		//(source+=[ChunkDef|QualifiedName])*
		//'}' parameters=ParametersBlock?
		public Group getGroup() { return cGroup; }
		
		//Overridable
		public RuleCall getOverridableParserRuleCall_0() { return cOverridableParserRuleCall_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(source+=[ChunkDef|QualifiedName])*
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//[ChunkDef|QualifiedName]
		public CrossReference getSourceChunkDefCrossReference_3_0() { return cSourceChunkDefCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getSourceChunkDefQualifiedNameParserRuleCall_3_0_1() { return cSourceChunkDefQualifiedNameParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//parameters=ParametersBlock?
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }
		
		//ParametersBlock
		public RuleCall getParametersParametersBlockParserRuleCall_5_0() { return cParametersParametersBlockParserRuleCall_5_0; }
	}
	public class ProductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Production");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOverridableParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cProductionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionsProductionConditionParserRuleCall_4_0 = (RuleCall)cConditionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cActionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActionsProductionActionParserRuleCall_7_0 = (RuleCall)cActionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cParametersAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cParametersParametersBlockParserRuleCall_9_0 = (RuleCall)cParametersAssignment_9.eContents().get(0);
		
		//  /**
		// * Productions
		// */
		//Production:
		//  Overridable
		//  'production' name=ID '{'
		//  (conditions+=ProductionCondition)+
		//  '}' '{'
		//  (actions+=ProductionAction)+
		//  '}' parameters=ParametersBlock?;
		@Override public ParserRule getRule() { return rule; }
		
		//Overridable
		//'production' name=ID '{'
		//(conditions+=ProductionCondition)+
		//'}' '{'
		//(actions+=ProductionAction)+
		//'}' parameters=ParametersBlock?
		public Group getGroup() { return cGroup; }
		
		//Overridable
		public RuleCall getOverridableParserRuleCall_0() { return cOverridableParserRuleCall_0; }
		
		//'production'
		public Keyword getProductionKeyword_1() { return cProductionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(conditions+=ProductionCondition)+
		public Assignment getConditionsAssignment_4() { return cConditionsAssignment_4; }
		
		//ProductionCondition
		public RuleCall getConditionsProductionConditionParserRuleCall_4_0() { return cConditionsProductionConditionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//(actions+=ProductionAction)+
		public Assignment getActionsAssignment_7() { return cActionsAssignment_7; }
		
		//ProductionAction
		public RuleCall getActionsProductionActionParserRuleCall_7_0() { return cActionsProductionActionParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//parameters=ParametersBlock?
		public Assignment getParametersAssignment_9() { return cParametersAssignment_9; }
		
		//ParametersBlock
		public RuleCall getParametersParametersBlockParserRuleCall_9_0() { return cParametersParametersBlockParserRuleCall_9_0; }
	}
	public class ProductionConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.ProductionCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMatchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScriptParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProxyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ProductionCondition:
		//  Match | Query | Script | Proxy;
		@Override public ParserRule getRule() { return rule; }
		
		//Match | Query | Script | Proxy
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Match
		public RuleCall getMatchParserRuleCall_0() { return cMatchParserRuleCall_0; }
		
		//Query
		public RuleCall getQueryParserRuleCall_1() { return cQueryParserRuleCall_1; }
		
		//Script
		public RuleCall getScriptParserRuleCall_2() { return cScriptParserRuleCall_2; }
		
		//Proxy
		public RuleCall getProxyParserRuleCall_3() { return cProxyParserRuleCall_3; }
	}
	public class MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Match");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameBufferCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameBufferIDTerminalRuleCall_0_0_1 = (RuleCall)cNameBufferCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIsaIsaBlockParserRuleCall_2_0 = (RuleCall)cIsaAssignment_2.eContents().get(0);
		private final Assignment cSlotsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSlotsComplexSlotParserRuleCall_3_0 = (RuleCall)cSlotsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Match:
		//  name=[Buffer] '{'
		//  isa=IsaBlock
		//  (slots+=ComplexSlot)*
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Buffer] '{'
		//isa=IsaBlock
		//(slots+=ComplexSlot)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=[Buffer]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Buffer]
		public CrossReference getNameBufferCrossReference_0_0() { return cNameBufferCrossReference_0_0; }
		
		//ID
		public RuleCall getNameBufferIDTerminalRuleCall_0_0_1() { return cNameBufferIDTerminalRuleCall_0_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//isa=IsaBlock
		public Assignment getIsaAssignment_2() { return cIsaAssignment_2; }
		
		//IsaBlock
		public RuleCall getIsaIsaBlockParserRuleCall_2_0() { return cIsaIsaBlockParserRuleCall_2_0; }
		
		//(slots+=ComplexSlot)*
		public Assignment getSlotsAssignment_3() { return cSlotsAssignment_3; }
		
		//ComplexSlot
		public RuleCall getSlotsComplexSlotParserRuleCall_3_0() { return cSlotsComplexSlotParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameBufferCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameBufferIDTerminalRuleCall_1_0_1 = (RuleCall)cNameBufferCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSlotsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSlotsComplexSlotParserRuleCall_3_0 = (RuleCall)cSlotsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Query:
		//  '?' name=[Buffer] '{'
		//  (slots+=ComplexSlot)*
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'?' name=[Buffer] '{'
		//(slots+=ComplexSlot)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }
		
		//name=[Buffer]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Buffer]
		public CrossReference getNameBufferCrossReference_1_0() { return cNameBufferCrossReference_1_0; }
		
		//ID
		public RuleCall getNameBufferIDTerminalRuleCall_1_0_1() { return cNameBufferIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(slots+=ComplexSlot)*
		public Assignment getSlotsAssignment_3() { return cSlotsAssignment_3; }
		
		//ComplexSlot
		public RuleCall getSlotsComplexSlotParserRuleCall_3_0() { return cSlotsComplexSlotParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProxyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Proxy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProxyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSlotsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSlotsSimpleSlotParserRuleCall_5_0 = (RuleCall)cSlotsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Proxy:
		//  'proxy' '(' name=STRING ')' '{'
		//  (slots+=SimpleSlot)*
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'proxy' '(' name=STRING ')' '{'
		//(slots+=SimpleSlot)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'proxy'
		public Keyword getProxyKeyword_0() { return cProxyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(slots+=SimpleSlot)*
		public Assignment getSlotsAssignment_5() { return cSlotsAssignment_5; }
		
		//SimpleSlot
		public RuleCall getSlotsSimpleSlotParserRuleCall_5_0() { return cSlotsSimpleSlotParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLanguageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLanguageSTRINGTerminalRuleCall_2_0 = (RuleCall)cLanguageAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cScriptAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScriptCODETerminalRuleCall_4_0 = (RuleCall)cScriptAssignment_4.eContents().get(0);
		
		//Script:
		//  'script' '(' language=STRING ')' script=CODE;
		@Override public ParserRule getRule() { return rule; }
		
		//'script' '(' language=STRING ')' script=CODE
		public Group getGroup() { return cGroup; }
		
		//'script'
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//language=STRING
		public Assignment getLanguageAssignment_2() { return cLanguageAssignment_2; }
		
		//STRING
		public RuleCall getLanguageSTRINGTerminalRuleCall_2_0() { return cLanguageSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//script=CODE
		public Assignment getScriptAssignment_4() { return cScriptAssignment_4; }
		
		//CODE
		public RuleCall getScriptCODETerminalRuleCall_4_0() { return cScriptCODETerminalRuleCall_4_0; }
	}
	public class ProductionActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.ProductionAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRemoveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModifyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cScriptParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProxyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOutputParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ProductionAction:
		//  Add | Remove | Modify | Script | Proxy | Output;
		@Override public ParserRule getRule() { return rule; }
		
		//Add | Remove | Modify | Script | Proxy | Output
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Add
		public RuleCall getAddParserRuleCall_0() { return cAddParserRuleCall_0; }
		
		//Remove
		public RuleCall getRemoveParserRuleCall_1() { return cRemoveParserRuleCall_1; }
		
		//Modify
		public RuleCall getModifyParserRuleCall_2() { return cModifyParserRuleCall_2; }
		
		//Script
		public RuleCall getScriptParserRuleCall_3() { return cScriptParserRuleCall_3; }
		
		//Proxy
		public RuleCall getProxyParserRuleCall_4() { return cProxyParserRuleCall_4; }
		
		//Output
		public RuleCall getOutputParserRuleCall_5() { return cOutputParserRuleCall_5; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameBufferCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameBufferIDTerminalRuleCall_1_0_1 = (RuleCall)cNameBufferCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIsaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIsaIsaBlockParserRuleCall_3_0 = (RuleCall)cIsaAssignment_3.eContents().get(0);
		private final Assignment cSlotsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSlotsConditionalSlotParserRuleCall_4_0 = (RuleCall)cSlotsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Add:
		//  '+' name=[Buffer] '{'
		//  isa=IsaBlock?
		//  (slots+=ConditionalSlot)*
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' name=[Buffer] '{'
		//isa=IsaBlock?
		//(slots+=ConditionalSlot)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//name=[Buffer]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Buffer]
		public CrossReference getNameBufferCrossReference_1_0() { return cNameBufferCrossReference_1_0; }
		
		//ID
		public RuleCall getNameBufferIDTerminalRuleCall_1_0_1() { return cNameBufferIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//isa=IsaBlock?
		public Assignment getIsaAssignment_3() { return cIsaAssignment_3; }
		
		//IsaBlock
		public RuleCall getIsaIsaBlockParserRuleCall_3_0() { return cIsaIsaBlockParserRuleCall_3_0; }
		
		//(slots+=ConditionalSlot)*
		public Assignment getSlotsAssignment_4() { return cSlotsAssignment_4; }
		
		//ConditionalSlot
		public RuleCall getSlotsConditionalSlotParserRuleCall_4_0() { return cSlotsConditionalSlotParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Remove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSimpleSlotBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Remove:
		//  '-' SimpleSlotBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' SimpleSlotBlock
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//SimpleSlotBlock
		public RuleCall getSimpleSlotBlockParserRuleCall_1() { return cSimpleSlotBlockParserRuleCall_1; }
	}
	public class ModifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Modify");
		private final RuleCall cSimpleSlotBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Modify:
		//  SimpleSlotBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleSlotBlock
		public RuleCall getSimpleSlotBlockParserRuleCall() { return cSimpleSlotBlockParserRuleCall; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Output:
		//  'output' '(' string=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'output' '(' string=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SimpleSlotBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.SimpleSlotBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameBufferCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameBufferIDTerminalRuleCall_0_0_1 = (RuleCall)cNameBufferCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSlotsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSlotsSimpleSlotParserRuleCall_2_0 = (RuleCall)cSlotsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//fragment SimpleSlotBlock:
		//  name=[Buffer] '{' (slots+=SimpleSlot)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Buffer] '{' (slots+=SimpleSlot)* '}'
		public Group getGroup() { return cGroup; }
		
		//name=[Buffer]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Buffer]
		public CrossReference getNameBufferCrossReference_0_0() { return cNameBufferCrossReference_0_0; }
		
		//ID
		public RuleCall getNameBufferIDTerminalRuleCall_0_0_1() { return cNameBufferIDTerminalRuleCall_0_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(slots+=SimpleSlot)*
		public Assignment getSlotsAssignment_2() { return cSlotsAssignment_2; }
		
		//SimpleSlot
		public RuleCall getSlotsSimpleSlotParserRuleCall_2_0() { return cSlotsSimpleSlotParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class IsaBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.IsaBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIsaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTypeChunkTypeCrossReference_0_1_0 = (CrossReference)cTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cTypeChunkTypeQualifiedNameParserRuleCall_0_1_0_1 = (RuleCall)cTypeChunkTypeCrossReference_0_1_0.eContents().get(1);
		private final Assignment cChunkAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cChunkChunkDefCrossReference_1_0 = (CrossReference)cChunkAssignment_1.eContents().get(0);
		private final RuleCall cChunkChunkDefQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cChunkChunkDefCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameVARIABLEParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//IsaBlock:
		//  (('isa' type=[ChunkType|QualifiedName]) |
		//         (chunk=[ChunkDef|QualifiedName]) |
		//         (name=VARIABLE));
		@Override public ParserRule getRule() { return rule; }
		
		//(('isa' type=[ChunkType|QualifiedName]) |
		//       (chunk=[ChunkDef|QualifiedName]) |
		//       (name=VARIABLE))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('isa' type=[ChunkType|QualifiedName])
		public Group getGroup_0() { return cGroup_0; }
		
		//'isa'
		public Keyword getIsaKeyword_0_0() { return cIsaKeyword_0_0; }
		
		//type=[ChunkType|QualifiedName]
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//[ChunkType|QualifiedName]
		public CrossReference getTypeChunkTypeCrossReference_0_1_0() { return cTypeChunkTypeCrossReference_0_1_0; }
		
		//QualifiedName
		public RuleCall getTypeChunkTypeQualifiedNameParserRuleCall_0_1_0_1() { return cTypeChunkTypeQualifiedNameParserRuleCall_0_1_0_1; }
		
		//(chunk=[ChunkDef|QualifiedName])
		public Assignment getChunkAssignment_1() { return cChunkAssignment_1; }
		
		//[ChunkDef|QualifiedName]
		public CrossReference getChunkChunkDefCrossReference_1_0() { return cChunkChunkDefCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getChunkChunkDefQualifiedNameParserRuleCall_1_0_1() { return cChunkChunkDefQualifiedNameParserRuleCall_1_0_1; }
		
		//(name=VARIABLE)
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//VARIABLE
		public RuleCall getNameVARIABLEParserRuleCall_2_0() { return cNameVARIABLEParserRuleCall_2_0; }
	}
	public class SimpleSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.SimpleSlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////  (=>Value) | ChunkDef | ChunkType;
		//  //VariableReference : variable=VARIABLE;
		////  /*
		//// * Slots
		//// */
		//SimpleSlot:
		//  name=ID '=' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=Value
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class ComplexSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.ComplexSlot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalSlotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComplexSlot : BooleanOperation | ConditionalSlot;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanOperation | ConditionalSlot
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanOperation
		public RuleCall getBooleanOperationParserRuleCall_0() { return cBooleanOperationParserRuleCall_0; }
		
		//ConditionalSlot
		public RuleCall getConditionalSlotParserRuleCall_1() { return cConditionalSlotParserRuleCall_1; }
	}
	public class BooleanOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.BooleanOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrSlotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotSlotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAndSlotParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BooleanOperation:
		//  OrSlot | NotSlot | AndSlot;
		@Override public ParserRule getRule() { return rule; }
		
		//OrSlot | NotSlot | AndSlot
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OrSlot
		public RuleCall getOrSlotParserRuleCall_0() { return cOrSlotParserRuleCall_0; }
		
		//NotSlot
		public RuleCall getNotSlotParserRuleCall_1() { return cNotSlotParserRuleCall_1; }
		
		//AndSlot
		public RuleCall getAndSlotParserRuleCall_2() { return cAndSlotParserRuleCall_2; }
	}
	public class ConditionalSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.ConditionalSlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameVARIABLEParserRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionEnumRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ConditionalSlot:
		//  name=(ID | VARIABLE) condition=Condition value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//name=(ID | VARIABLE) condition=Condition value=Value
		public Group getGroup() { return cGroup; }
		
		//name=(ID | VARIABLE)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(ID | VARIABLE)
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//VARIABLE
		public RuleCall getNameVARIABLEParserRuleCall_0_0_1() { return cNameVARIABLEParserRuleCall_0_0_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionEnumRuleCall_1_0() { return cConditionConditionEnumRuleCall_1_0; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class OrSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.OrSlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrSlotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSlotsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSlotsComplexSlotParserRuleCall_3_0 = (RuleCall)cSlotsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OrSlot:
		//  {OrSlot} 'or' '{' (slots+=ComplexSlot)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{OrSlot} 'or' '{' (slots+=ComplexSlot)* '}'
		public Group getGroup() { return cGroup; }
		
		//{OrSlot}
		public Action getOrSlotAction_0() { return cOrSlotAction_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(slots+=ComplexSlot)*
		public Assignment getSlotsAssignment_3() { return cSlotsAssignment_3; }
		
		//ComplexSlot
		public RuleCall getSlotsComplexSlotParserRuleCall_3_0() { return cSlotsComplexSlotParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AndSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.AndSlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndSlotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSlotsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSlotsComplexSlotParserRuleCall_3_0 = (RuleCall)cSlotsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AndSlot:
		//  {AndSlot} 'and' '{' (slots+=ComplexSlot)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{AndSlot} 'and' '{' (slots+=ComplexSlot)* '}'
		public Group getGroup() { return cGroup; }
		
		//{AndSlot}
		public Action getAndSlotAction_0() { return cAndSlotAction_0; }
		
		//'and'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(slots+=ComplexSlot)*
		public Assignment getSlotsAssignment_3() { return cSlotsAssignment_3; }
		
		//ComplexSlot
		public RuleCall getSlotsComplexSlotParserRuleCall_3_0() { return cSlotsComplexSlotParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NotSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.NotSlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotSlotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSlotsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSlotsComplexSlotParserRuleCall_3_0 = (RuleCall)cSlotsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NotSlot:
		//  {NotSlot} 'not' '{' (slots+=ComplexSlot)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{NotSlot} 'not' '{' (slots+=ComplexSlot)* '}'
		public Group getGroup() { return cGroup; }
		
		//{NotSlot}
		public Action getNotSlotAction_0() { return cNotSlotAction_0; }
		
		//'not'
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(slots+=ComplexSlot)*
		public Assignment getSlotsAssignment_3() { return cSlotsAssignment_3; }
		
		//ComplexSlot
		public RuleCall getSlotsComplexSlotParserRuleCall_3_0() { return cSlotsComplexSlotParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//  /*
		//   * parameter block
		//   */
		//Parameter:
		//  name=STRING ':' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING ':' value=Value
		public Group getGroup() { return cGroup; }
		
		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class ParametersBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.ParametersBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParametersBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterParameterParserRuleCall_2_0 = (RuleCall)cParameterAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParametersBlock:
		//  {ParametersBlock} '[' (parameter+=Parameter)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{ParametersBlock} '[' (parameter+=Parameter)* ']'
		public Group getGroup() { return cGroup; }
		
		//{ParametersBlock}
		public Action getParametersBlockAction_0() { return cParametersBlockAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(parameter+=Parameter)*
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_2_0() { return cParameterParameterParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cNameAlternatives_0_1_0 = (Alternatives)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cNameVARIABLEParserRuleCall_0_1_0_0 = (RuleCall)cNameAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0_1 = (RuleCall)cNameAlternatives_0_1_0.eContents().get(1);
		private final RuleCall cNameNULLParserRuleCall_0_1_0_2 = (RuleCall)cNameAlternatives_0_1_0.eContents().get(2);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Assignment cNumberAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumberNUMERICParserRuleCall_2_0 = (RuleCall)cNumberAssignment_2.eContents().get(0);
		private final Assignment cBooleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanBOOLEANParserRuleCall_3_0 = (RuleCall)cBooleanAssignment_3.eContents().get(0);
		
		//Value:
		////  value=(ID | STRING | NUMBER | VARIABLE | BOOLEAN | NULL);
		// {Value} (name=(VARIABLE|ID|NULL))|
		//             (string=STRING)|
		//             (number=NUMERIC)| (boolean=BOOLEAN) ;
		@Override public ParserRule getRule() { return rule; }
		
		////  value=(ID | STRING | NUMBER | VARIABLE | BOOLEAN | NULL);
		// {Value} (name=(VARIABLE|ID|NULL))|
		//             (string=STRING)|
		//             (number=NUMERIC)| (boolean=BOOLEAN)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////  value=(ID | STRING | NUMBER | VARIABLE | BOOLEAN | NULL);
		// {Value} (name=(VARIABLE|ID|NULL))
		public Group getGroup_0() { return cGroup_0; }
		
		////  value=(ID | STRING | NUMBER | VARIABLE | BOOLEAN | NULL);
		// {Value}
		public Action getValueAction_0_0() { return cValueAction_0_0; }
		
		//(name=(VARIABLE|ID|NULL))
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//(VARIABLE|ID|NULL)
		public Alternatives getNameAlternatives_0_1_0() { return cNameAlternatives_0_1_0; }
		
		//VARIABLE
		public RuleCall getNameVARIABLEParserRuleCall_0_1_0_0() { return cNameVARIABLEParserRuleCall_0_1_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0_1() { return cNameIDTerminalRuleCall_0_1_0_1; }
		
		//NULL
		public RuleCall getNameNULLParserRuleCall_0_1_0_2() { return cNameNULLParserRuleCall_0_1_0_2; }
		
		//(string=STRING)
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
		
		//(number=NUMERIC)
		public Assignment getNumberAssignment_2() { return cNumberAssignment_2; }
		
		//NUMERIC
		public RuleCall getNumberNUMERICParserRuleCall_2_0() { return cNumberNUMERICParserRuleCall_2_0; }
		
		//(boolean=BOOLEAN)
		public Assignment getBooleanAssignment_3() { return cBooleanAssignment_3; }
		
		//BOOLEAN
		public RuleCall getBooleanBOOLEANParserRuleCall_3_0() { return cBooleanBOOLEANParserRuleCall_3_0; }
	}
	public class VARIABLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.VARIABLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// value = [SlotValueReference | QualifiedName];
		////ValueReference : ChunkDef | ChunkType | Production | Buffer | VariableReference;
		////PrimitiveReference : NullReference | BooleanReference | NumberReference | StringReference;
		////SlotValueReference : ValueReference | PrimitiveReference;
		///*
		//   * Constant values
		//   */
		////NullReference : null?=NULL;
		////BooleanReference : boolean=BOOLEAN;
		////NumberReference : value=NUMERIC;
		////StringReference : string=STRING;
		//VARIABLE:
		//  '=' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' ID
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class NULLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.NULL");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//NULL:
		//  'null';
		@Override public ParserRule getRule() { return rule; }
		
		//'null'
		public Keyword getNullKeyword() { return cNullKeyword; }
	}
	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN returns ecore::EBooleanObject:
		//  'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class NUMERICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.NUMERIC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDIGITSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDIGITSTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//NUMERIC returns ecore::EDoubleObject:
		//  '-'? DIGITS ('.' DIGITS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? DIGITS ('.' DIGITS)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//DIGITS
		public RuleCall getDIGITSTerminalRuleCall_1() { return cDIGITSTerminalRuleCall_1; }
		
		//('.' DIGITS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//DIGITS
		public RuleCall getDIGITSTerminalRuleCall_2_1() { return cDIGITSTerminalRuleCall_2_1; }
	}
	public class OVERRIDEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.OVERRIDE");
		private final Keyword cOverrideKeyword = (Keyword)rule.eContents().get(1);
		
		//OVERRIDE:
		//  '@Override';
		@Override public ParserRule getRule() { return rule; }
		
		//'@Override'
		public Keyword getOverrideKeyword() { return cOverrideKeyword; }
	}
	
	public class ConditionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSEqualsSignKeyword_0_0 = (Keyword)cEQUALSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLTLessThanSignKeyword_1_0 = (Keyword)cLTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLTELessThanSignEqualsSignKeyword_2_0 = (Keyword)cLTEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTGreaterThanSignKeyword_3_0 = (Keyword)cGTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGTEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGTEGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGTEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNOTExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNOTEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Condition:
		//  EQUALS='=' | LT='<' | LTE='<=' | GT='>' | GTE='>=' | NOT='!=';
		public EnumRule getRule() { return rule; }
		
		//EQUALS='=' | LT='<' | LTE='<=' | GT='>' | GTE='>=' | NOT='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUALS='='
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_0() { return cEQUALSEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALSEqualsSignKeyword_0_0() { return cEQUALSEqualsSignKeyword_0_0; }
		
		//LT='<'
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_1() { return cLTEnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getLTLessThanSignKeyword_1_0() { return cLTLessThanSignKeyword_1_0; }
		
		//LTE='<='
		public EnumLiteralDeclaration getLTEEnumLiteralDeclaration_2() { return cLTEEnumLiteralDeclaration_2; }
		
		//'<='
		public Keyword getLTELessThanSignEqualsSignKeyword_2_0() { return cLTELessThanSignEqualsSignKeyword_2_0; }
		
		//GT='>'
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_3() { return cGTEnumLiteralDeclaration_3; }
		
		//'>'
		public Keyword getGTGreaterThanSignKeyword_3_0() { return cGTGreaterThanSignKeyword_3_0; }
		
		//GTE='>='
		public EnumLiteralDeclaration getGTEEnumLiteralDeclaration_4() { return cGTEEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getGTEGreaterThanSignEqualsSignKeyword_4_0() { return cGTEGreaterThanSignEqualsSignKeyword_4_0; }
		
		//NOT='!='
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_5() { return cNOTEnumLiteralDeclaration_5; }
		
		//'!='
		public Keyword getNOTExclamationMarkEqualsSignKeyword_5_0() { return cNOTExclamationMarkEqualsSignKeyword_5_0; }
	}
	
	private final ModelFragmentElements pModelFragment;
	private final PackageDeclarationElements pPackageDeclaration;
	private final ImportElements pImport;
	private final ModelModuleElements pModelModule;
	private final ModelExtensionElements pModelExtension;
	private final ElementElements pElement;
	private final ParametersElements pParameters;
	private final ChunksElements pChunks;
	private final ChunkDefElements pChunkDef;
	private final ChunkTypeElements pChunkType;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final OverridableElements pOverridable;
	private final TerminalRule tID;
	private final BuffersElements pBuffers;
	private final BufferElements pBuffer;
	private final ProductionElements pProduction;
	private final ProductionConditionElements pProductionCondition;
	private final MatchElements pMatch;
	private final QueryElements pQuery;
	private final ProxyElements pProxy;
	private final ScriptElements pScript;
	private final ProductionActionElements pProductionAction;
	private final AddElements pAdd;
	private final RemoveElements pRemove;
	private final ModifyElements pModify;
	private final OutputElements pOutput;
	private final SimpleSlotBlockElements pSimpleSlotBlock;
	private final IsaBlockElements pIsaBlock;
	private final SimpleSlotElements pSimpleSlot;
	private final ConditionElements eCondition;
	private final ComplexSlotElements pComplexSlot;
	private final BooleanOperationElements pBooleanOperation;
	private final ConditionalSlotElements pConditionalSlot;
	private final OrSlotElements pOrSlot;
	private final AndSlotElements pAndSlot;
	private final NotSlotElements pNotSlot;
	private final ParameterElements pParameter;
	private final ParametersBlockElements pParametersBlock;
	private final ValueElements pValue;
	private final VARIABLEElements pVARIABLE;
	private final NULLElements pNULL;
	private final BOOLEANElements pBOOLEAN;
	private final NUMERICElements pNUMERIC;
	private final OVERRIDEElements pOVERRIDE;
	private final TerminalRule tDIGITS;
	private final TerminalRule tCODE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ModelFragmentGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModelFragment = new ModelFragmentElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pImport = new ImportElements();
		this.pModelModule = new ModelModuleElements();
		this.pModelExtension = new ModelExtensionElements();
		this.pElement = new ElementElements();
		this.pParameters = new ParametersElements();
		this.pChunks = new ChunksElements();
		this.pChunkDef = new ChunkDefElements();
		this.pChunkType = new ChunkTypeElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pOverridable = new OverridableElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.ID");
		this.pBuffers = new BuffersElements();
		this.pBuffer = new BufferElements();
		this.pProduction = new ProductionElements();
		this.pProductionCondition = new ProductionConditionElements();
		this.pMatch = new MatchElements();
		this.pQuery = new QueryElements();
		this.pProxy = new ProxyElements();
		this.pScript = new ScriptElements();
		this.pProductionAction = new ProductionActionElements();
		this.pAdd = new AddElements();
		this.pRemove = new RemoveElements();
		this.pModify = new ModifyElements();
		this.pOutput = new OutputElements();
		this.pSimpleSlotBlock = new SimpleSlotBlockElements();
		this.pIsaBlock = new IsaBlockElements();
		this.pSimpleSlot = new SimpleSlotElements();
		this.eCondition = new ConditionElements();
		this.pComplexSlot = new ComplexSlotElements();
		this.pBooleanOperation = new BooleanOperationElements();
		this.pConditionalSlot = new ConditionalSlotElements();
		this.pOrSlot = new OrSlotElements();
		this.pAndSlot = new AndSlotElements();
		this.pNotSlot = new NotSlotElements();
		this.pParameter = new ParameterElements();
		this.pParametersBlock = new ParametersBlockElements();
		this.pValue = new ValueElements();
		this.pVARIABLE = new VARIABLEElements();
		this.pNULL = new NULLElements();
		this.pBOOLEAN = new BOOLEANElements();
		this.pNUMERIC = new NUMERICElements();
		this.pOVERRIDE = new OVERRIDEElements();
		this.tDIGITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.DIGITS");
		this.tCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.jactr.io2.jactr.ModelFragment.CODE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.jactr.io2.jactr.ModelFragment".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
	//ModelFragment:
	//  package=PackageDeclaration;
	public ModelFragmentElements getModelFragmentAccess() {
		return pModelFragment;
	}
	
	public ParserRule getModelFragmentRule() {
		return getModelFragmentAccess().getRule();
	}
	
	//PackageDeclaration:
	//  'namespace' name=QualifiedName '{'
	//  (imports+=Import)*
	//  (modules+=ModelModule)*
	//  (extensions+=ModelExtension)*
	//  (buffers=Buffers)?
	//  (elements+=Element)*
	//  '}'
	//  parameters=ParametersBlock?;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}
	
	//Import:
	//  'import' importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ModelModule:
	//  'module' moduleClass=STRING parameters=ParametersBlock?;
	public ModelModuleElements getModelModuleAccess() {
		return pModelModule;
	}
	
	public ParserRule getModelModuleRule() {
		return getModelModuleAccess().getRule();
	}
	
	//ModelExtension:
	//  'extension' extensionClass=STRING parameters=ParametersBlock?;
	public ModelExtensionElements getModelExtensionAccess() {
		return pModelExtension;
	}
	
	public ParserRule getModelExtensionRule() {
		return getModelExtensionAccess().getRule();
	}
	
	//Element:
	//  ChunkType | Chunks | Production | Parameters;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Parameters: 'parameters''('elements+=ID (','elements+=ID)* ')' parameters=ParametersBlock;
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//Chunks:
	//  type=[ChunkType|QualifiedName] chunks+=ChunkDef (',' chunks+=ChunkDef)*;
	public ChunksElements getChunksAccess() {
		return pChunks;
	}
	
	public ParserRule getChunksRule() {
		return getChunksAccess().getRule();
	}
	
	//ChunkDef:
	//  Overridable
	//  name=ID
	//  ('(' slots+=SimpleSlot (',' slots+=SimpleSlot)* ')')?
	//  parameters=ParametersBlock?;
	public ChunkDefElements getChunkDefAccess() {
		return pChunkDef;
	}
	
	public ParserRule getChunkDefRule() {
		return getChunkDefAccess().getRule();
	}
	
	//ChunkType:
	//  Overridable
	//  'chunktype' name=ID ('extends' superType=[ChunkType|QualifiedName]
	//  //ignore multiple inheritance for now
	//  /*(',' superType+=[ChunkType|QualifiedName])? */)?
	//  '{'
	//  (slots+=SimpleSlot)* '}'
	//  parameters=ParametersBlock?;
	public ChunkTypeElements getChunkTypeAccess() {
		return pChunkType;
	}
	
	public ParserRule getChunkTypeRule() {
		return getChunkTypeAccess().getRule();
	}
	
	//  //@Override
	//QualifiedNameWithWildcard:
	//  QualifiedName '.*';
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//  //@Override
	//QualifiedName:
	//  ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//fragment Overridable : (override?=OVERRIDE)?;
	public OverridableElements getOverridableAccess() {
		return pOverridable;
	}
	
	public ParserRule getOverridableRule() {
		return getOverridableAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//  '^'?('a'..'z' | 'A'..'Z' | ':') ('a'..'z' | 'A'..'Z' | '0'..'9' | '-' | '_')* ('a'..'z' | 'A'..'Z' | '0'..'9');
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//  //terminal VARIABLE:
	////  '='  ('a'..'z' | 'A'..'Z' | '0'..'9' | '-' )* ('a'..'z' | 'A'..'Z' | '0'..'9');
	//Buffers : {Buffers} 'buffers''{' (buffers+=Buffer)* '}';
	public BuffersElements getBuffersAccess() {
		return pBuffers;
	}
	
	public ParserRule getBuffersRule() {
		return getBuffersAccess().getRule();
	}
	
	///**
	// * Buffer block
	// */
	//Buffer:
	//  Overridable
	//   name=ID '{'
	//  (source+=[ChunkDef|QualifiedName])*
	//  '}' parameters=ParametersBlock?;
	public BufferElements getBufferAccess() {
		return pBuffer;
	}
	
	public ParserRule getBufferRule() {
		return getBufferAccess().getRule();
	}
	
	//  /**
	// * Productions
	// */
	//Production:
	//  Overridable
	//  'production' name=ID '{'
	//  (conditions+=ProductionCondition)+
	//  '}' '{'
	//  (actions+=ProductionAction)+
	//  '}' parameters=ParametersBlock?;
	public ProductionElements getProductionAccess() {
		return pProduction;
	}
	
	public ParserRule getProductionRule() {
		return getProductionAccess().getRule();
	}
	
	//ProductionCondition:
	//  Match | Query | Script | Proxy;
	public ProductionConditionElements getProductionConditionAccess() {
		return pProductionCondition;
	}
	
	public ParserRule getProductionConditionRule() {
		return getProductionConditionAccess().getRule();
	}
	
	//Match:
	//  name=[Buffer] '{'
	//  isa=IsaBlock
	//  (slots+=ComplexSlot)*
	//  '}';
	public MatchElements getMatchAccess() {
		return pMatch;
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}
	
	//Query:
	//  '?' name=[Buffer] '{'
	//  (slots+=ComplexSlot)*
	//  '}';
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//Proxy:
	//  'proxy' '(' name=STRING ')' '{'
	//  (slots+=SimpleSlot)*
	//  '}';
	public ProxyElements getProxyAccess() {
		return pProxy;
	}
	
	public ParserRule getProxyRule() {
		return getProxyAccess().getRule();
	}
	
	//Script:
	//  'script' '(' language=STRING ')' script=CODE;
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}
	
	//ProductionAction:
	//  Add | Remove | Modify | Script | Proxy | Output;
	public ProductionActionElements getProductionActionAccess() {
		return pProductionAction;
	}
	
	public ParserRule getProductionActionRule() {
		return getProductionActionAccess().getRule();
	}
	
	//Add:
	//  '+' name=[Buffer] '{'
	//  isa=IsaBlock?
	//  (slots+=ConditionalSlot)*
	//  '}';
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Remove:
	//  '-' SimpleSlotBlock;
	public RemoveElements getRemoveAccess() {
		return pRemove;
	}
	
	public ParserRule getRemoveRule() {
		return getRemoveAccess().getRule();
	}
	
	//Modify:
	//  SimpleSlotBlock;
	public ModifyElements getModifyAccess() {
		return pModify;
	}
	
	public ParserRule getModifyRule() {
		return getModifyAccess().getRule();
	}
	
	//Output:
	//  'output' '(' string=STRING ')';
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//fragment SimpleSlotBlock:
	//  name=[Buffer] '{' (slots+=SimpleSlot)* '}';
	public SimpleSlotBlockElements getSimpleSlotBlockAccess() {
		return pSimpleSlotBlock;
	}
	
	public ParserRule getSimpleSlotBlockRule() {
		return getSimpleSlotBlockAccess().getRule();
	}
	
	//IsaBlock:
	//  (('isa' type=[ChunkType|QualifiedName]) |
	//         (chunk=[ChunkDef|QualifiedName]) |
	//         (name=VARIABLE));
	public IsaBlockElements getIsaBlockAccess() {
		return pIsaBlock;
	}
	
	public ParserRule getIsaBlockRule() {
		return getIsaBlockAccess().getRule();
	}
	
	////  (=>Value) | ChunkDef | ChunkType;
	//  //VariableReference : variable=VARIABLE;
	////  /*
	//// * Slots
	//// */
	//SimpleSlot:
	//  name=ID '=' value=Value;
	public SimpleSlotElements getSimpleSlotAccess() {
		return pSimpleSlot;
	}
	
	public ParserRule getSimpleSlotRule() {
		return getSimpleSlotAccess().getRule();
	}
	
	//enum Condition:
	//  EQUALS='=' | LT='<' | LTE='<=' | GT='>' | GTE='>=' | NOT='!=';
	public ConditionElements getConditionAccess() {
		return eCondition;
	}
	
	public EnumRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ComplexSlot : BooleanOperation | ConditionalSlot;
	public ComplexSlotElements getComplexSlotAccess() {
		return pComplexSlot;
	}
	
	public ParserRule getComplexSlotRule() {
		return getComplexSlotAccess().getRule();
	}
	
	//BooleanOperation:
	//  OrSlot | NotSlot | AndSlot;
	public BooleanOperationElements getBooleanOperationAccess() {
		return pBooleanOperation;
	}
	
	public ParserRule getBooleanOperationRule() {
		return getBooleanOperationAccess().getRule();
	}
	
	//ConditionalSlot:
	//  name=(ID | VARIABLE) condition=Condition value=Value;
	public ConditionalSlotElements getConditionalSlotAccess() {
		return pConditionalSlot;
	}
	
	public ParserRule getConditionalSlotRule() {
		return getConditionalSlotAccess().getRule();
	}
	
	//OrSlot:
	//  {OrSlot} 'or' '{' (slots+=ComplexSlot)* '}';
	public OrSlotElements getOrSlotAccess() {
		return pOrSlot;
	}
	
	public ParserRule getOrSlotRule() {
		return getOrSlotAccess().getRule();
	}
	
	//AndSlot:
	//  {AndSlot} 'and' '{' (slots+=ComplexSlot)* '}';
	public AndSlotElements getAndSlotAccess() {
		return pAndSlot;
	}
	
	public ParserRule getAndSlotRule() {
		return getAndSlotAccess().getRule();
	}
	
	//NotSlot:
	//  {NotSlot} 'not' '{' (slots+=ComplexSlot)* '}';
	public NotSlotElements getNotSlotAccess() {
		return pNotSlot;
	}
	
	public ParserRule getNotSlotRule() {
		return getNotSlotAccess().getRule();
	}
	
	//  /*
	//   * parameter block
	//   */
	//Parameter:
	//  name=STRING ':' value=Value;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ParametersBlock:
	//  {ParametersBlock} '[' (parameter+=Parameter)* ']';
	public ParametersBlockElements getParametersBlockAccess() {
		return pParametersBlock;
	}
	
	public ParserRule getParametersBlockRule() {
		return getParametersBlockAccess().getRule();
	}
	
	//Value:
	////  value=(ID | STRING | NUMBER | VARIABLE | BOOLEAN | NULL);
	// {Value} (name=(VARIABLE|ID|NULL))|
	//             (string=STRING)|
	//             (number=NUMERIC)| (boolean=BOOLEAN) ;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//// value = [SlotValueReference | QualifiedName];
	////ValueReference : ChunkDef | ChunkType | Production | Buffer | VariableReference;
	////PrimitiveReference : NullReference | BooleanReference | NumberReference | StringReference;
	////SlotValueReference : ValueReference | PrimitiveReference;
	///*
	//   * Constant values
	//   */
	////NullReference : null?=NULL;
	////BooleanReference : boolean=BOOLEAN;
	////NumberReference : value=NUMERIC;
	////StringReference : string=STRING;
	//VARIABLE:
	//  '=' ID;
	public VARIABLEElements getVARIABLEAccess() {
		return pVARIABLE;
	}
	
	public ParserRule getVARIABLERule() {
		return getVARIABLEAccess().getRule();
	}
	
	//NULL:
	//  'null';
	public NULLElements getNULLAccess() {
		return pNULL;
	}
	
	public ParserRule getNULLRule() {
		return getNULLAccess().getRule();
	}
	
	//BOOLEAN returns ecore::EBooleanObject:
	//  'true' | 'false';
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//NUMERIC returns ecore::EDoubleObject:
	//  '-'? DIGITS ('.' DIGITS)?;
	public NUMERICElements getNUMERICAccess() {
		return pNUMERIC;
	}
	
	public ParserRule getNUMERICRule() {
		return getNUMERICAccess().getRule();
	}
	
	//OVERRIDE:
	//  '@Override';
	public OVERRIDEElements getOVERRIDEAccess() {
		return pOVERRIDE;
	}
	
	public ParserRule getOVERRIDERule() {
		return getOVERRIDEAccess().getRule();
	}
	
	//terminal DIGITS:
	//  ('0'..'9')+;
	public TerminalRule getDIGITSRule() {
		return tDIGITS;
	}
	
	//terminal CODE:
	//  '<[['->']]>';
	public TerminalRule getCODERule() {
		return tCODE;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
