/*
 * generated by Xtext 2.25.0
 */
grammar InternalModelFragment;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.jactr.io2.jactr.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.jactr.io2.jactr.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.jactr.io2.jactr.services.ModelFragmentGrammarAccess;

}

@parser::members {

 	private ModelFragmentGrammarAccess grammarAccess;

    public InternalModelFragmentParser(TokenStream input, ModelFragmentGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ModelFragment";
   	}

   	@Override
   	protected ModelFragmentGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModelFragment
entryRuleModelFragment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelFragmentRule()); }
	iv_ruleModelFragment=ruleModelFragment
	{ $current=$iv_ruleModelFragment.current; }
	EOF;

// Rule ModelFragment
ruleModelFragment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelFragmentAccess().getPackagePackageDeclarationParserRuleCall_0());
			}
			lv_package_0_0=rulePackageDeclaration
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelFragmentRule());
				}
				set(
					$current,
					"package",
					lv_package_0_0,
					"org.jactr.io2.jactr.ModelFragment.PackageDeclaration");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	iv_rulePackageDeclaration=rulePackageDeclaration
	{ $current=$iv_rulePackageDeclaration.current; }
	EOF;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='namespace'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getNamespaceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.jactr.io2.jactr.ModelFragment.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getImportsImportParserRuleCall_3_0());
				}
				lv_imports_3_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					add(
						$current,
						"imports",
						lv_imports_3_0,
						"org.jactr.io2.jactr.ModelFragment.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getModulesModelModuleParserRuleCall_4_0());
				}
				lv_modules_4_0=ruleModelModule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					add(
						$current,
						"modules",
						lv_modules_4_0,
						"org.jactr.io2.jactr.ModelFragment.ModelModule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getExtensionsModelExtensionParserRuleCall_5_0());
				}
				lv_extensions_5_0=ruleModelExtension
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					add(
						$current,
						"extensions",
						lv_extensions_5_0,
						"org.jactr.io2.jactr.ModelFragment.ModelExtension");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getBuffersBuffersParserRuleCall_6_0());
				}
				lv_buffers_6_0=ruleBuffers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					set(
						$current,
						"buffers",
						lv_buffers_6_0,
						"org.jactr.io2.jactr.ModelFragment.Buffers");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getElementsElementParserRuleCall_7_0());
				}
				lv_elements_7_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					add(
						$current,
						"elements",
						lv_elements_7_0,
						"org.jactr.io2.jactr.ModelFragment.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getParametersParametersBlockParserRuleCall_9_0());
				}
				lv_parameters_9_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_9_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"org.jactr.io2.jactr.ModelFragment.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleModelModule
entryRuleModelModule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelModuleRule()); }
	iv_ruleModelModule=ruleModelModule
	{ $current=$iv_ruleModelModule.current; }
	EOF;

// Rule ModelModule
ruleModelModule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='module'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelModuleAccess().getModuleKeyword_0());
		}
		(
			(
				lv_moduleClass_1_0=RULE_STRING
				{
					newLeafNode(lv_moduleClass_1_0, grammarAccess.getModelModuleAccess().getModuleClassSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelModuleRule());
					}
					setWithLastConsumed(
						$current,
						"moduleClass",
						lv_moduleClass_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelModuleAccess().getParametersParametersBlockParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelModuleRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_2_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleModelExtension
entryRuleModelExtension returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelExtensionRule()); }
	iv_ruleModelExtension=ruleModelExtension
	{ $current=$iv_ruleModelExtension.current; }
	EOF;

// Rule ModelExtension
ruleModelExtension returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='extension'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelExtensionAccess().getExtensionKeyword_0());
		}
		(
			(
				lv_extensionClass_1_0=RULE_STRING
				{
					newLeafNode(lv_extensionClass_1_0, grammarAccess.getModelExtensionAccess().getExtensionClassSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelExtensionRule());
					}
					setWithLastConsumed(
						$current,
						"extensionClass",
						lv_extensionClass_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelExtensionAccess().getParametersParametersBlockParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelExtensionRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_2_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getChunkTypeParserRuleCall_0());
		}
		this_ChunkType_0=ruleChunkType
		{
			$current = $this_ChunkType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getChunksParserRuleCall_1());
		}
		this_Chunks_1=ruleChunks
		{
			$current = $this_Chunks_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getProductionParserRuleCall_2());
		}
		this_Production_2=ruleProduction
		{
			$current = $this_Production_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getParametersParserRuleCall_3());
		}
		this_Parameters_3=ruleParameters
		{
			$current = $this_Parameters_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParameters
entryRuleParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleParameters=ruleParameters
	{ $current=$iv_ruleParameters.current; }
	EOF;

// Rule Parameters
ruleParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='parameters'
		{
			newLeafNode(otherlv_0, grammarAccess.getParametersAccess().getParametersKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getParametersAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_elements_2_0=RULE_ID
				{
					newLeafNode(lv_elements_2_0, grammarAccess.getParametersAccess().getElementsIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParametersRule());
					}
					addWithLastConsumed(
						$current,
						"elements",
						lv_elements_2_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getParametersAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_elements_4_0=RULE_ID
					{
						newLeafNode(lv_elements_4_0, grammarAccess.getParametersAccess().getElementsIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParametersRule());
						}
						addWithLastConsumed(
							$current,
							"elements",
							lv_elements_4_0,
							"org.jactr.io2.jactr.ModelFragment.ID");
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getParametersAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParametersAccess().getParametersParametersBlockParserRuleCall_5_0());
				}
				lv_parameters_6_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametersRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_6_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleChunks
entryRuleChunks returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChunksRule()); }
	iv_ruleChunks=ruleChunks
	{ $current=$iv_ruleChunks.current; }
	EOF;

// Rule Chunks
ruleChunks returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChunksRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getChunksAccess().getTypeChunkTypeCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getChunksAccess().getChunksChunkDefParserRuleCall_1_0());
				}
				lv_chunks_1_0=ruleChunkDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChunksRule());
					}
					add(
						$current,
						"chunks",
						lv_chunks_1_0,
						"org.jactr.io2.jactr.ModelFragment.ChunkDef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getChunksAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChunksAccess().getChunksChunkDefParserRuleCall_2_1_0());
					}
					lv_chunks_3_0=ruleChunkDef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChunksRule());
						}
						add(
							$current,
							"chunks",
							lv_chunks_3_0,
							"org.jactr.io2.jactr.ModelFragment.ChunkDef");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleChunkDef
entryRuleChunkDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChunkDefRule()); }
	iv_ruleChunkDef=ruleChunkDef
	{ $current=$iv_ruleChunkDef.current; }
	EOF;

// Rule ChunkDef
ruleChunkDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getChunkDefRule());
			}
			newCompositeNode(grammarAccess.getChunkDefAccess().getOverridableParserRuleCall_0());
		}
		this_Overridable_0=ruleOverridable[$current]
		{
			$current = $this_Overridable_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getChunkDefAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChunkDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getChunkDefAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChunkDefAccess().getSlotsSimpleSlotParserRuleCall_2_1_0());
					}
					lv_slots_3_0=ruleSimpleSlot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChunkDefRule());
						}
						add(
							$current,
							"slots",
							lv_slots_3_0,
							"org.jactr.io2.jactr.ModelFragment.SimpleSlot");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getChunkDefAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getChunkDefAccess().getSlotsSimpleSlotParserRuleCall_2_2_1_0());
						}
						lv_slots_5_0=ruleSimpleSlot
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getChunkDefRule());
							}
							add(
								$current,
								"slots",
								lv_slots_5_0,
								"org.jactr.io2.jactr.ModelFragment.SimpleSlot");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getChunkDefAccess().getRightParenthesisKeyword_2_3());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getChunkDefAccess().getParametersParametersBlockParserRuleCall_3_0());
				}
				lv_parameters_7_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChunkDefRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_7_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleChunkType
entryRuleChunkType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChunkTypeRule()); }
	iv_ruleChunkType=ruleChunkType
	{ $current=$iv_ruleChunkType.current; }
	EOF;

// Rule ChunkType
ruleChunkType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getChunkTypeRule());
			}
			newCompositeNode(grammarAccess.getChunkTypeAccess().getOverridableParserRuleCall_0());
		}
		this_Overridable_0=ruleOverridable[$current]
		{
			$current = $this_Overridable_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='chunktype'
		{
			newLeafNode(otherlv_1, grammarAccess.getChunkTypeAccess().getChunktypeKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getChunkTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChunkTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getChunkTypeAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChunkTypeRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getChunkTypeAccess().getSuperTypeChunkTypeCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getChunkTypeAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChunkTypeAccess().getSlotsSimpleSlotParserRuleCall_5_0());
				}
				lv_slots_6_0=ruleSimpleSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChunkTypeRule());
					}
					add(
						$current,
						"slots",
						lv_slots_6_0,
						"org.jactr.io2.jactr.ModelFragment.SimpleSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getChunkTypeAccess().getRightCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChunkTypeAccess().getParametersParametersBlockParserRuleCall_7_0());
				}
				lv_parameters_8_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChunkTypeRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_8_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;


// Rule Overridable
ruleOverridable[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getOverridableAccess().getOverrideOVERRIDEParserRuleCall_0());
			}
			lv_override_0_0=ruleOVERRIDE
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getOverridableRule());
				}
				set(
					$current,
					"override",
					lv_override_0_0 != null,
					"org.jactr.io2.jactr.ModelFragment.OVERRIDE");
				afterParserOrEnumRuleCall();
			}
		)
	)?
;

// Entry rule entryRuleBuffers
entryRuleBuffers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBuffersRule()); }
	iv_ruleBuffers=ruleBuffers
	{ $current=$iv_ruleBuffers.current; }
	EOF;

// Rule Buffers
ruleBuffers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBuffersAccess().getBuffersAction_0(),
					$current);
			}
		)
		otherlv_1='buffers'
		{
			newLeafNode(otherlv_1, grammarAccess.getBuffersAccess().getBuffersKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getBuffersAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBuffersAccess().getBuffersBufferParserRuleCall_3_0());
				}
				lv_buffers_3_0=ruleBuffer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBuffersRule());
					}
					add(
						$current,
						"buffers",
						lv_buffers_3_0,
						"org.jactr.io2.jactr.ModelFragment.Buffer");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBuffersAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBuffer
entryRuleBuffer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBufferRule()); }
	iv_ruleBuffer=ruleBuffer
	{ $current=$iv_ruleBuffer.current; }
	EOF;

// Rule Buffer
ruleBuffer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getBufferRule());
			}
			newCompositeNode(grammarAccess.getBufferAccess().getOverridableParserRuleCall_0());
		}
		this_Overridable_0=ruleOverridable[$current]
		{
			$current = $this_Overridable_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getBufferAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBufferRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getBufferAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBufferRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getBufferAccess().getSourceChunkDefCrossReference_3_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBufferAccess().getRightCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBufferAccess().getParametersParametersBlockParserRuleCall_5_0());
				}
				lv_parameters_5_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBufferRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_5_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleProduction
entryRuleProduction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProductionRule()); }
	iv_ruleProduction=ruleProduction
	{ $current=$iv_ruleProduction.current; }
	EOF;

// Rule Production
ruleProduction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getProductionRule());
			}
			newCompositeNode(grammarAccess.getProductionAccess().getOverridableParserRuleCall_0());
		}
		this_Overridable_0=ruleOverridable[$current]
		{
			$current = $this_Overridable_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='production'
		{
			newLeafNode(otherlv_1, grammarAccess.getProductionAccess().getProductionKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getProductionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProductionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getProductionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProductionAccess().getConditionsProductionConditionParserRuleCall_4_0());
				}
				lv_conditions_4_0=ruleProductionCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductionRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_4_0,
						"org.jactr.io2.jactr.ModelFragment.ProductionCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getProductionAccess().getRightCurlyBracketKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getProductionAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProductionAccess().getActionsProductionActionParserRuleCall_7_0());
				}
				lv_actions_7_0=ruleProductionAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductionRule());
					}
					add(
						$current,
						"actions",
						lv_actions_7_0,
						"org.jactr.io2.jactr.ModelFragment.ProductionAction");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getProductionAccess().getRightCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProductionAccess().getParametersParametersBlockParserRuleCall_9_0());
				}
				lv_parameters_9_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductionRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_9_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleProductionCondition
entryRuleProductionCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProductionConditionRule()); }
	iv_ruleProductionCondition=ruleProductionCondition
	{ $current=$iv_ruleProductionCondition.current; }
	EOF;

// Rule ProductionCondition
ruleProductionCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProductionConditionAccess().getMatchParserRuleCall_0());
		}
		this_Match_0=ruleMatch
		{
			$current = $this_Match_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionConditionAccess().getQueryParserRuleCall_1());
		}
		this_Query_1=ruleQuery
		{
			$current = $this_Query_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionConditionAccess().getScriptParserRuleCall_2());
		}
		this_Script_2=ruleScript
		{
			$current = $this_Script_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionConditionAccess().getProxyParserRuleCall_3());
		}
		this_Proxy_3=ruleProxy
		{
			$current = $this_Proxy_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMatch
entryRuleMatch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMatchRule()); }
	iv_ruleMatch=ruleMatch
	{ $current=$iv_ruleMatch.current; }
	EOF;

// Rule Match
ruleMatch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMatchRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getMatchAccess().getNameBufferCrossReference_0_0());
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMatchAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchAccess().getIsaIsaBlockParserRuleCall_2_0());
				}
				lv_isa_2_0=ruleIsaBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchRule());
					}
					set(
						$current,
						"isa",
						lv_isa_2_0,
						"org.jactr.io2.jactr.ModelFragment.IsaBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchAccess().getSlotsComplexSlotParserRuleCall_3_0());
				}
				lv_slots_3_0=ruleComplexSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchRule());
					}
					add(
						$current,
						"slots",
						lv_slots_3_0,
						"org.jactr.io2.jactr.ModelFragment.ComplexSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getMatchAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	iv_ruleQuery=ruleQuery
	{ $current=$iv_ruleQuery.current; }
	EOF;

// Rule Query
ruleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='?'
		{
			newLeafNode(otherlv_0, grammarAccess.getQueryAccess().getQuestionMarkKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQueryRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getQueryAccess().getNameBufferCrossReference_1_0());
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getQueryAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getSlotsComplexSlotParserRuleCall_3_0());
				}
				lv_slots_3_0=ruleComplexSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					add(
						$current,
						"slots",
						lv_slots_3_0,
						"org.jactr.io2.jactr.ModelFragment.ComplexSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getQueryAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleProxy
entryRuleProxy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProxyRule()); }
	iv_ruleProxy=ruleProxy
	{ $current=$iv_ruleProxy.current; }
	EOF;

// Rule Proxy
ruleProxy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='proxy'
		{
			newLeafNode(otherlv_0, grammarAccess.getProxyAccess().getProxyKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getProxyAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getProxyAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProxyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getProxyAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getProxyAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProxyAccess().getSlotsSimpleSlotParserRuleCall_5_0());
				}
				lv_slots_5_0=ruleSimpleSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProxyRule());
					}
					add(
						$current,
						"slots",
						lv_slots_5_0,
						"org.jactr.io2.jactr.ModelFragment.SimpleSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getProxyAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	iv_ruleScript=ruleScript
	{ $current=$iv_ruleScript.current; }
	EOF;

// Rule Script
ruleScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='script'
		{
			newLeafNode(otherlv_0, grammarAccess.getScriptAccess().getScriptKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getScriptAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_language_2_0=RULE_STRING
				{
					newLeafNode(lv_language_2_0, grammarAccess.getScriptAccess().getLanguageSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScriptRule());
					}
					setWithLastConsumed(
						$current,
						"language",
						lv_language_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getScriptAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				lv_script_4_0=RULE_CODE
				{
					newLeafNode(lv_script_4_0, grammarAccess.getScriptAccess().getScriptCODETerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScriptRule());
					}
					setWithLastConsumed(
						$current,
						"script",
						lv_script_4_0,
						"org.jactr.io2.jactr.ModelFragment.CODE");
				}
			)
		)
	)
;

// Entry rule entryRuleProductionAction
entryRuleProductionAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProductionActionRule()); }
	iv_ruleProductionAction=ruleProductionAction
	{ $current=$iv_ruleProductionAction.current; }
	EOF;

// Rule ProductionAction
ruleProductionAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProductionActionAccess().getAddParserRuleCall_0());
		}
		this_Add_0=ruleAdd
		{
			$current = $this_Add_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionActionAccess().getRemoveParserRuleCall_1());
		}
		this_Remove_1=ruleRemove
		{
			$current = $this_Remove_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionActionAccess().getModifyParserRuleCall_2());
		}
		this_Modify_2=ruleModify
		{
			$current = $this_Modify_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionActionAccess().getScriptParserRuleCall_3());
		}
		this_Script_3=ruleScript
		{
			$current = $this_Script_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionActionAccess().getProxyParserRuleCall_4());
		}
		this_Proxy_4=ruleProxy
		{
			$current = $this_Proxy_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionActionAccess().getOutputParserRuleCall_5());
		}
		this_Output_5=ruleOutput
		{
			$current = $this_Output_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAdd
entryRuleAdd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddRule()); }
	iv_ruleAdd=ruleAdd
	{ $current=$iv_ruleAdd.current; }
	EOF;

// Rule Add
ruleAdd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='+'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddAccess().getPlusSignKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getAddAccess().getNameBufferCrossReference_1_0());
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAddAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddAccess().getIsaIsaBlockParserRuleCall_3_0());
				}
				lv_isa_3_0=ruleIsaBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddRule());
					}
					set(
						$current,
						"isa",
						lv_isa_3_0,
						"org.jactr.io2.jactr.ModelFragment.IsaBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAddAccess().getSlotsConditionalSlotParserRuleCall_4_0());
				}
				lv_slots_4_0=ruleConditionalSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddRule());
					}
					add(
						$current,
						"slots",
						lv_slots_4_0,
						"org.jactr.io2.jactr.ModelFragment.ConditionalSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getAddAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleRemove
entryRuleRemove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveRule()); }
	iv_ruleRemove=ruleRemove
	{ $current=$iv_ruleRemove.current; }
	EOF;

// Rule Remove
ruleRemove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveAccess().getHyphenMinusKeyword_0());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getRemoveRule());
			}
			newCompositeNode(grammarAccess.getRemoveAccess().getSimpleSlotBlockParserRuleCall_1());
		}
		this_SimpleSlotBlock_1=ruleSimpleSlotBlock[$current]
		{
			$current = $this_SimpleSlotBlock_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModify
entryRuleModify returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifyRule()); }
	iv_ruleModify=ruleModify
	{ $current=$iv_ruleModify.current; }
	EOF;

// Rule Modify
ruleModify returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		if ($current==null) {
			$current = createModelElement(grammarAccess.getModifyRule());
		}
		newCompositeNode(grammarAccess.getModifyAccess().getSimpleSlotBlockParserRuleCall());
	}
	this_SimpleSlotBlock_0=ruleSimpleSlotBlock[$current]
	{
		$current = $this_SimpleSlotBlock_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='output'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutputAccess().getOutputKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_string_2_0=RULE_STRING
				{
					newLeafNode(lv_string_2_0, grammarAccess.getOutputAccess().getStringSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getOutputAccess().getRightParenthesisKeyword_3());
		}
	)
;


// Rule SimpleSlotBlock
ruleSimpleSlotBlock[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleSlotBlockRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getSimpleSlotBlockAccess().getNameBufferCrossReference_0_0());
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSimpleSlotBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleSlotBlockAccess().getSlotsSimpleSlotParserRuleCall_2_0());
				}
				lv_slots_2_0=ruleSimpleSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleSlotBlockRule());
					}
					add(
						$current,
						"slots",
						lv_slots_2_0,
						"org.jactr.io2.jactr.ModelFragment.SimpleSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getSimpleSlotBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleIsaBlock
entryRuleIsaBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsaBlockRule()); }
	iv_ruleIsaBlock=ruleIsaBlock
	{ $current=$iv_ruleIsaBlock.current; }
	EOF;

// Rule IsaBlock
ruleIsaBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='isa'
			{
				newLeafNode(otherlv_0, grammarAccess.getIsaBlockAccess().getIsaKeyword_0_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIsaBlockRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getIsaBlockAccess().getTypeChunkTypeCrossReference_0_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIsaBlockRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getIsaBlockAccess().getChunkChunkDefCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIsaBlockAccess().getNameVARIABLEParserRuleCall_2_0());
				}
				lv_name_3_0=ruleVARIABLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsaBlockRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"org.jactr.io2.jactr.ModelFragment.VARIABLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSimpleSlot
entryRuleSimpleSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleSlotRule()); }
	iv_ruleSimpleSlot=ruleSimpleSlot
	{ $current=$iv_ruleSimpleSlot.current; }
	EOF;

// Rule SimpleSlot
ruleSimpleSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSimpleSlotAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleSlotRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getSimpleSlotAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleSlotAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleSlotRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.jactr.io2.jactr.ModelFragment.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComplexSlot
entryRuleComplexSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexSlotRule()); }
	iv_ruleComplexSlot=ruleComplexSlot
	{ $current=$iv_ruleComplexSlot.current; }
	EOF;

// Rule ComplexSlot
ruleComplexSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComplexSlotAccess().getBooleanOperationParserRuleCall_0());
		}
		this_BooleanOperation_0=ruleBooleanOperation
		{
			$current = $this_BooleanOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComplexSlotAccess().getConditionalSlotParserRuleCall_1());
		}
		this_ConditionalSlot_1=ruleConditionalSlot
		{
			$current = $this_ConditionalSlot_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanOperation
entryRuleBooleanOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanOperationRule()); }
	iv_ruleBooleanOperation=ruleBooleanOperation
	{ $current=$iv_ruleBooleanOperation.current; }
	EOF;

// Rule BooleanOperation
ruleBooleanOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanOperationAccess().getOrSlotParserRuleCall_0());
		}
		this_OrSlot_0=ruleOrSlot
		{
			$current = $this_OrSlot_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanOperationAccess().getNotSlotParserRuleCall_1());
		}
		this_NotSlot_1=ruleNotSlot
		{
			$current = $this_NotSlot_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanOperationAccess().getAndSlotParserRuleCall_2());
		}
		this_AndSlot_2=ruleAndSlot
		{
			$current = $this_AndSlot_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConditionalSlot
entryRuleConditionalSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalSlotRule()); }
	iv_ruleConditionalSlot=ruleConditionalSlot
	{ $current=$iv_ruleConditionalSlot.current; }
	EOF;

// Rule ConditionalSlot
ruleConditionalSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_1=RULE_ID
					{
						newLeafNode(lv_name_0_1, grammarAccess.getConditionalSlotAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionalSlotRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_1,
							"org.jactr.io2.jactr.ModelFragment.ID");
					}
					    |
					{
						newCompositeNode(grammarAccess.getConditionalSlotAccess().getNameVARIABLEParserRuleCall_0_0_1());
					}
					lv_name_0_2=ruleVARIABLE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalSlotRule());
						}
						set(
							$current,
							"name",
							lv_name_0_2,
							"org.jactr.io2.jactr.ModelFragment.VARIABLE");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalSlotAccess().getConditionConditionEnumRuleCall_1_0());
				}
				lv_condition_1_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalSlotRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.jactr.io2.jactr.ModelFragment.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalSlotAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalSlotRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.jactr.io2.jactr.ModelFragment.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOrSlot
entryRuleOrSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrSlotRule()); }
	iv_ruleOrSlot=ruleOrSlot
	{ $current=$iv_ruleOrSlot.current; }
	EOF;

// Rule OrSlot
ruleOrSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOrSlotAccess().getOrSlotAction_0(),
					$current);
			}
		)
		otherlv_1='or'
		{
			newLeafNode(otherlv_1, grammarAccess.getOrSlotAccess().getOrKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getOrSlotAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOrSlotAccess().getSlotsComplexSlotParserRuleCall_3_0());
				}
				lv_slots_3_0=ruleComplexSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrSlotRule());
					}
					add(
						$current,
						"slots",
						lv_slots_3_0,
						"org.jactr.io2.jactr.ModelFragment.ComplexSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getOrSlotAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAndSlot
entryRuleAndSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndSlotRule()); }
	iv_ruleAndSlot=ruleAndSlot
	{ $current=$iv_ruleAndSlot.current; }
	EOF;

// Rule AndSlot
ruleAndSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAndSlotAccess().getAndSlotAction_0(),
					$current);
			}
		)
		otherlv_1='and'
		{
			newLeafNode(otherlv_1, grammarAccess.getAndSlotAccess().getAndKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAndSlotAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAndSlotAccess().getSlotsComplexSlotParserRuleCall_3_0());
				}
				lv_slots_3_0=ruleComplexSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndSlotRule());
					}
					add(
						$current,
						"slots",
						lv_slots_3_0,
						"org.jactr.io2.jactr.ModelFragment.ComplexSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getAndSlotAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleNotSlot
entryRuleNotSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotSlotRule()); }
	iv_ruleNotSlot=ruleNotSlot
	{ $current=$iv_ruleNotSlot.current; }
	EOF;

// Rule NotSlot
ruleNotSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNotSlotAccess().getNotSlotAction_0(),
					$current);
			}
		)
		otherlv_1='not'
		{
			newLeafNode(otherlv_1, grammarAccess.getNotSlotAccess().getNotKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getNotSlotAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotSlotAccess().getSlotsComplexSlotParserRuleCall_3_0());
				}
				lv_slots_3_0=ruleComplexSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotSlotRule());
					}
					add(
						$current,
						"slots",
						lv_slots_3_0,
						"org.jactr.io2.jactr.ModelFragment.ComplexSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getNotSlotAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_STRING
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.jactr.io2.jactr.ModelFragment.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParametersBlock
entryRuleParametersBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersBlockRule()); }
	iv_ruleParametersBlock=ruleParametersBlock
	{ $current=$iv_ruleParametersBlock.current; }
	EOF;

// Rule ParametersBlock
ruleParametersBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParametersBlockAccess().getParametersBlockAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getParametersBlockAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParametersBlockAccess().getParameterParameterParserRuleCall_2_0());
				}
				lv_parameter_2_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametersBlockRule());
					}
					add(
						$current,
						"parameter",
						lv_parameter_2_0,
						"org.jactr.io2.jactr.ModelFragment.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getParametersBlockAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getValueAccess().getValueAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getValueAccess().getNameVARIABLEParserRuleCall_0_1_0_0());
						}
						lv_name_1_1=ruleVARIABLE
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValueRule());
							}
							set(
								$current,
								"name",
								lv_name_1_1,
								"org.jactr.io2.jactr.ModelFragment.VARIABLE");
							afterParserOrEnumRuleCall();
						}
						    |
						lv_name_1_2=RULE_ID
						{
							newLeafNode(lv_name_1_2, grammarAccess.getValueAccess().getNameIDTerminalRuleCall_0_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getValueRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_1_2,
								"org.jactr.io2.jactr.ModelFragment.ID");
						}
						    |
						{
							newCompositeNode(grammarAccess.getValueAccess().getNameNULLParserRuleCall_0_1_0_2());
						}
						lv_name_1_3=ruleNULL
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValueRule());
							}
							set(
								$current,
								"name",
								lv_name_1_3,
								"org.jactr.io2.jactr.ModelFragment.NULL");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			(
				lv_string_2_0=RULE_STRING
				{
					newLeafNode(lv_string_2_0, grammarAccess.getValueAccess().getStringSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getNumberNUMERICParserRuleCall_2_0());
				}
				lv_number_3_0=ruleNUMERIC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"number",
						lv_number_3_0,
						"org.jactr.io2.jactr.ModelFragment.NUMERIC");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getBooleanBOOLEANParserRuleCall_3_0());
				}
				lv_boolean_4_0=ruleBOOLEAN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"boolean",
						lv_boolean_4_0,
						"org.jactr.io2.jactr.ModelFragment.BOOLEAN");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVARIABLE
entryRuleVARIABLE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVARIABLERule()); }
	iv_ruleVARIABLE=ruleVARIABLE
	{ $current=$iv_ruleVARIABLE.current.getText(); }
	EOF;

// Rule VARIABLE
ruleVARIABLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVARIABLEAccess().getEqualsSignKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getVARIABLEAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleNULL
entryRuleNULL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNULLRule()); }
	iv_ruleNULL=ruleNULL
	{ $current=$iv_ruleNULL.current.getText(); }
	EOF;

// Rule NULL
ruleNULL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='null'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNULLAccess().getNullKeyword());
	}
;

// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); }
	iv_ruleBOOLEAN=ruleBOOLEAN
	{ $current=$iv_ruleBOOLEAN.current.getText(); }
	EOF;

// Rule BOOLEAN
ruleBOOLEAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLEANAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLEANAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleNUMERIC
entryRuleNUMERIC returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNUMERICRule()); }
	iv_ruleNUMERIC=ruleNUMERIC
	{ $current=$iv_ruleNUMERIC.current.getText(); }
	EOF;

// Rule NUMERIC
ruleNUMERIC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMERICAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_DIGITS_1=RULE_DIGITS
		{
			$current.merge(this_DIGITS_1);
		}
		{
			newLeafNode(this_DIGITS_1, grammarAccess.getNUMERICAccess().getDIGITSTerminalRuleCall_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMERICAccess().getFullStopKeyword_2_0());
			}
			this_DIGITS_3=RULE_DIGITS
			{
				$current.merge(this_DIGITS_3);
			}
			{
				newLeafNode(this_DIGITS_3, grammarAccess.getNUMERICAccess().getDIGITSTerminalRuleCall_2_1());
			}
		)?
	)
;

// Entry rule entryRuleOVERRIDE
entryRuleOVERRIDE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOVERRIDERule()); }
	iv_ruleOVERRIDE=ruleOVERRIDE
	{ $current=$iv_ruleOVERRIDE.current.getText(); }
	EOF;

// Rule OVERRIDE
ruleOVERRIDE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='@Override'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOVERRIDEAccess().getOverrideKeyword());
	}
;

// Rule Condition
ruleCondition returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getConditionAccess().getEQUALSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getConditionAccess().getEQUALSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getConditionAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getConditionAccess().getLTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<='
			{
				$current = grammarAccess.getConditionAccess().getLTEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getConditionAccess().getLTEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>'
			{
				$current = grammarAccess.getConditionAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getConditionAccess().getGTEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>='
			{
				$current = grammarAccess.getConditionAccess().getGTEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getConditionAccess().getGTEEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='!='
			{
				$current = grammarAccess.getConditionAccess().getNOTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getConditionAccess().getNOTEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|':') ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'_')* ('a'..'z'|'A'..'Z'|'0'..'9');

RULE_DIGITS : ('0'..'9')+;

RULE_CODE : '<[[' ( options {greedy=false;} : . )*']]>';

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
