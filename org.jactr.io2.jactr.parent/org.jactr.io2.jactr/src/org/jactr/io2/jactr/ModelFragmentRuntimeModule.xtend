/*
 * generated by Xtext 2.16.0
 */
package org.jactr.io2.jactr

import com.google.inject.Binder
import com.google.inject.name.Names
import org.eclipse.xtext.conversion.IValueConverterService
import org.eclipse.xtext.findReferences.IReferenceFinder
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.serializer.sequencer.IHiddenTokenSequencer
import org.jactr.io2.jactr.formatting2.CommentingHiddenTokenSequencer
import org.jactr.io2.jactr.naming.QualifiedNameProvider
import org.jactr.io2.jactr.references.ModelFragmentReferenceFinder
import org.jactr.io2.jactr.scoping.JactrImportedNamespaceAwareLocalScopeProvider
import org.jactr.io2.jactr.source.DefaultSourceLocator
import org.jactr.io2.jactr.source.ISourceLocator
import org.jactr.io2.jactr.validation.DefaultClassNameValidator
import org.jactr.io2.jactr.validation.IClassNameValidator
import org.jactr.io2.jactr.validation.ModelFragmentUtil
import org.jactr.io2.jactr.value.ModelFragmentConverters

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class ModelFragmentRuntimeModule extends AbstractModelFragmentRuntimeModule {
	def bindModelFragmentUtil() {
		return ModelFragmentUtil
	}

	def Class<? extends IClassNameValidator> bindIClassNameValidator() {
		return DefaultClassNameValidator
	}
	
	def Class<? extends IHiddenTokenSequencer> bindIHiddenTokenSequencer(){
	  CommentingHiddenTokenSequencer
	}

	override bindIQualifiedNameProvider() {
		QualifiedNameProvider
	}

	override Class<? extends IValueConverterService> bindIValueConverterService() {
		ModelFragmentConverters
	}
	
	def Class<? extends ISourceLocator> bindISourceLocator(){
	 DefaultSourceLocator 
	}

	override configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(
			JactrImportedNamespaceAwareLocalScopeProvider);
	}
	
//	def configureReferenceFinder(Binder binder){
//	  binder.bind(IReferenceFinder).to(ModelFragmentReferenceFinder)
//	}
	
	def Class<? extends IReferenceFinder> bindReferenceFinder(){
	  ModelFragmentReferenceFinder
	}

}
